controllers/challenge.php:	 $this->load->model("Challengemodel");
controllers/challenge.php:         $this->load->model("Clanmodel");
controllers/challenge.php:	 $this->load->model("Teammodel");
controllers/challenge.php:         $this->load->model("Commentmodel");
controllers/challenge.php:	 $this->load->library('layout', 'layout_main');
controllers/challenge.php:	 $data['id'] = $this->uri->segment(3);
controllers/challenge.php:	 $chal = $this->Challengemodel->get($data['id']);
controllers/challenge.php:	 $this->Challengemodel->save($data);
controllers/challenge.php:	 $this->email("chall_accept", $data['id']);
controllers/challenge.php:         $data['id'] = $this->uri->segment(3);
controllers/challenge.php:	 $data['notes'] = $this->input->post("notes");
controllers/challenge.php:         $this->Challengemodel->save($data);
controllers/challenge.php:         $this->email("chall_reject", $data['id']);
controllers/challenge.php:	 $data = $this->input->post();
controllers/challenge.php:	 $id = $this->Challengemodel->save($data);
controllers/challenge.php:	 $this->email("chall_request", $id);
controllers/challenge.php:		$this->email("comment", 16);
controllers/challenge.php:	$chall = $this->Challengemodel->get($id);
controllers/challenge.php:	$leaders = $this->Teammodel->get_teamleaders($chall->team2);
controllers/challenge.php:	$leaders = $this->Teammodel->get_teamleaders($chall->team2);
controllers/challenge.php:	 $leaders =  $this->Teammodel->get_teamleaders($chall->team1, $chall->team2);
controllers/challenge.php:	$leaders = $this->Teammodel->get_teamleaders($chall->team1);
controllers/challenge.php:		$data['controller'] = $this->router->class;
controllers/challenge.php:		$content = $this->parser->parse("email/".$template, $data , true);
controllers/challenge.php:	 $clanid = $this->uri->segment(3);
controllers/challenge.php:	 $clan = $this->Clanmodel->get($clanid);
controllers/challenge.php:	 if ($this->input->post("password") == $clan->password) {
controllers/challenge.php:		 $this->Clanmodel->join($clanid);
controllers/challenge.php:		$data['challenges'] = $this->Challengemodel->get_all();
controllers/challenge.php:		$teams = $this->Clanmodel->myteams();
controllers/challenge.php:			$chall['teams'][] =  $this->Challengemodel->get_by_team($team->id);
controllers/challenge.php:		$this->layout->view("challenge/list", $data);
controllers/challenge.php:	 $data['challenge'] = $this->Challengemodel->get($this->uri->segment(3));
controllers/challenge.php:	 $data['comments'] = $this->Commentmodel->get($this->router->class, $this->uri->segment(3));
controllers/challenge.php:	 $this->layout->view("challenge/view", $data);
controllers/challenge.php:		$info = $this->input->post();
controllers/challenge.php:		$this->email("comment", $info['oid']);
controllers/challenge.php:                $this->Commentmodel->save($info);
controllers/challenge.php:	 $data['clans'] = $this->Clanmodel->get_all();
controllers/challenge.php:	 $this->layout->view("clan/list", $data);
controllers/dropbox.php:	$this->load->model("Pagesmodel");	
controllers/dropbox.php:	$this->load->model("Dropboxmodel");
controllers/dropbox.php:         if (!$this->session->userdata('loggedin'))
controllers/dropbox.php:  $this->data['title'] = "DropBox";
controllers/dropbox.php:  $this->data['files'] = $this->Dropboxmodel->get();
controllers/dropbox.php:  $this->data['folders'] = $this->folders();
controllers/dropbox.php:        $this->table->set_template($tmpl);
controllers/dropbox.php:        $this->table->set_heading('ID', 'Filename', 'Added', 'Owner');
controllers/dropbox.php:         foreach($this->Dropboxmodel->get() as $row)
controllers/dropbox.php:          $this->table->add_row($row->id, "<a href='/dropbox/".$row->filename."'>".$row->filename."</a>", $date, $row->owner, anchor('dropbox/delete/'.$row->id, 'Delete', array('class' => 'confirmClick', 'title' => $row->filename)));
controllers/dropbox.php:  $this->data['table'] = $this->table->generate();
controllers/dropbox.php:  $this->layout->view("dropbox/index", $this->data);
controllers/dropbox.php:  //$data['gallery'] = $this->Gallerymodel->get($gallery);
controllers/dropbox.php:  $this->layout->view('admin/addgallery', $data);  
controllers/dropbox.php:  $data['name'] = $this->input->post('name');
controllers/dropbox.php:  $data['owner'] = $this->session->userdata('user')->id;
controllers/dropbox.php:  $this->db->insert('folder', $data);
controllers/dropbox.php:  $query = $this->db->get('folder');
controllers/dropbox.php:  $gal = $this->Gallerymodel->get();
controllers/dropbox.php:  $this->layout->view('admin/selectgallery', $data);
controllers/dropbox.php:         if (!$this->session->userdata('loggedin'))
controllers/dropbox.php:  $gal = $this->uri->segment(3);
controllers/dropbox.php:	$gallery = $this->input->post('gallery');
controllers/dropbox.php:  $this->session->set_userdata('gallery', $gallery);
controllers/dropbox.php:  $data['gallery'] = $this->Gallerymodel->get($gallery);
controllers/dropbox.php:  $this->layout->view('admin/uploadimage', $data);
controllers/dropbox.php:  $id = $this->uri->segment(3);
controllers/dropbox.php:  $this->Dropboxmodel->delete($id);
controllers/dropbox.php:  $this->session->set_flashdata('message', '<div class="success">File has been deleted.</div>');
controllers/dropbox.php:                $data['owner'] = $this->session->userdata('user')->id;
controllers/dropbox.php:		$data['folder'] = $this->input->post('folder');
controllers/dropbox.php:                $id[] = $this->Dropboxmodel->add($data);
controllers/dropbox.php:		$this->session->set_flashdata('message', '<div class="success">File upload complete.</div>');
controllers/dropbox.php:  $this->layout->view("dropbox/login", $data);
controllers/dropbox.php:	foreach ($this->folders() as $folder)
controllers/dropbox.php:	$folder = $this->uri->segment(3);
controllers/dropbox.php:        $this->table->set_template($tmpl);
controllers/dropbox.php:        $this->table->set_heading('ID', 'Filename', 'Added', 'Owner');
controllers/dropbox.php:         foreach($this->Dropboxmodel->get(0, $folder) as $row)
controllers/dropbox.php:          $this->table->add_row($row->id, "<a href='/dropbox/".$row->filename."'>".$row->filename."</a>", $date, $row->owner, anchor('dropbox/delete/'.$row->id, 'Delete', array('class' => 'confirmClick', 'title' => $row->filename)));
controllers/dropbox.php:  echo $this->table->generate();
controllers/player.php:	 $this->load->model("Playermodel");
controllers/player.php:         $this->load->model("Clanmodel");
controllers/player.php:	 $id = $this->uri->segment(3);
controllers/player.php:	 $data['player'] = $this->Playermodel->get($id);
controllers/player.php:         $data['tabs'] = $this->Playermodel->get_tabs();
controllers/player.php:	 $data['clans'] = $this->Clanmodel->myclans($id);
controllers/player.php:	 $data['teams'] = $this->Clanmodel->myteams($id);
controllers/player.php:	 $this->layout->view("player/view", $data);
controllers/player.php:	 $data['players'] = $this->Playermodel->get_all();
controllers/player.php:	 $this->layout->view('player/list', $data);
controllers/player.php:	 $this->layout->view('login', $data);
controllers/player.php:	$ref = $this->agent->referrer();
controllers/player.php:	   $this->parser->parse('login', $data);
controllers/player.php:          $user = $this->input->post('player');
controllers/player.php:          if ($this->Playermodel->authenticate($user['email'], $user['password']))
controllers/player.php:         $this->session->unset_userdata('loggedin');
controllers/player.php:	 $this->session->unset_userdata('user');
controllers/player.php:	 $this->session->unset_userdata('facebook');
controllers/player.php:	 $this->session->unset_userdata('fbloggedin');
controllers/player.php:	 $id = $this->uri->segment(4);
controllers/player.php:	 $data['tab'] = $this->Playermodel->get_tab($this->uri->segment(3));
controllers/player.php:	 $data['fields'] = $this->Playermodel->fields($this->uri->segment(3));
controllers/player.php:		 $this->load->view("player/information", $data);
controllers/player.php:		$this->load->view("player/get_information", $data);
controllers/player.php:	 $this->load->view("player/rig");
controllers/player.php:	 $data['user'] = $this->Usermodel->get($this->uri->segment(3));
controllers/player.php:	 $this->load->view("users/edit", $data);
controllers/player.php:         $this->layout->view("player/register", $data);
controllers/player.php:	 $data['tabs'] = $this->Playermodel->get_tabs();
controllers/player.php:	 $this->layout->view("player/profile", $data);
controllers/player.php:		$data = $this->input->post();
controllers/player.php:		$this->do_upload();
controllers/player.php:		$id = $this->Playermodel->save($data);
controllers/player.php:$cookie = $this->get_facebook_cookie("199459096768167", "65bf692b09015b1586b680710c2e72e4");
controllers/player.php:$this->session->set_userdata('facebook', $fbuser);
controllers/player.php:	$this->load->library('upload', $config);
controllers/player.php:	if (!$this->upload->do_upload($field))
controllers/player.php:			$error = array('error' => $this->upload->display_errors());
controllers/player.php:			message( $this->upload->display_errors(), "error");
controllers/player.php:			$info =  $this->upload->data();
controllers/player.php:        	        $id = $this->Playermodel->save($data);
controllers/gallery.php: $this->load->model('Gallerymodel');
controllers/gallery.php: $data['gallery'] = $this->Gallerymodel->get();
controllers/gallery.php: $this->layout->view('gallery/index', $data);
controllers/gallery.php: $data = $this->input->post();
controllers/gallery.php: $id = $this->Gallerymodel->save($data);
controllers/gallery.php: $this->session->set_userdata('gallery', $id);
controllers/gallery.php: $gallery = $this->uri->segment(3);
controllers/gallery.php: $data['gallery'] = $this->Gallerymodel->get($gallery);
controllers/gallery.php: $data['images'] = $this->Gallerymodel->get_images($gallery);
controllers/gallery.php: $this->load->view("gallery/images", $data);
controllers/gallery.php: $gallery = $this->uri->segment(3);
controllers/gallery.php: $data['gallery'] = $this->Gallerymodel->get($gallery);
controllers/gallery.php: $data['images'] = $this->Gallerymodel->get_images($gallery);
controllers/gallery.php: $this->layout->view("gallery/images", $data);
controllers/gallery.php:         $id = $this->uri->segment(3, 0);
controllers/gallery.php:         $this->Gallerymodel->delete($id);
controllers/client.php:	 $this->load->model("Clientmodel");
controllers/client.php:	 $this->load->library('layout', 'layout_main');  
controllers/client.php:	$ref = $this->agent->referrer();
controllers/client.php:	   $this->parser->parse('login', $data);
controllers/client.php:          $user = $this->input->post('user');
controllers/client.php:          if ($this->Clientmodel->authenticate($user['email'], $user['password']))
controllers/client.php:          $this->session->set_userdata('loggedinclient', true);
controllers/client.php:         $this->session->unset_userdata('loggedinclient');
controllers/client.php:	 $data['user'] = $this->Clientmodel->get($this->uri->segment(3));
controllers/client.php:	 $this->load->view("client/edit", $data);
controllers/client.php:         $this->load->view("client/edit", $data);
controllers/client.php:		$this->Clientmodel->save($this->input->post());
controllers/client.php:		$data['clients'] = $this->Clientmodel->get_all();
controllers/client.php:		$this->load->view("client/dropbox", $data);
controllers/page.php:  $this->load->model('Pagemodel');
controllers/page.php:  $this->layout->view('welcome_message');
controllers/news.php:	 $this->load->model("Newsmodel");
controllers/news.php:         $this->load->model("Homemodel");
controllers/news.php:	 $id = $this->uri->segment(3);
controllers/news.php:	 $cat = $this->Newsmodel->get_categories($id);
controllers/news.php:	 $this->ckeditor =  array(
controllers/news.php:		return $this->ckeditor;
controllers/news.php:	 $data['news'] = $this->Homemodel->get_all();
controllers/news.php:	 $this->layout->view("news/index", $data);
controllers/news.php:	 $id = $this->uri->segment(3);
controllers/news.php:	         $data['news'] = $this->Newsmodel->get($id);
controllers/news.php:         $this->layout->view("news/view", $data);
controllers/news.php:	 $data['ckeditor'] = $this->ck("content22");
controllers/news.php:	 $data['ckeditor2'] = $this->ck("content222");
controllers/news.php:	 $data['sections'] = $this->Newsmodel->get_sections();
controllers/news.php:         $article = $this->uri->segment(3);
controllers/news.php:	 $data['article'] = $this->Newsmodel->get($article);
controllers/news.php:         $data['categories'] =  $this->Newsmodel->get_categories($art[0]->sectionid);
controllers/news.php:	 $this->layout->view("news/edit", $data);
controllers/news.php:	 $id = $this->Newsmodel->save($_POST);
controllers/news.php:		$this->do_upload($id);
controllers/news.php:	 $this->Newsmodel->delete($this->uri->segment(3));
controllers/news.php:                $id = $this->Newsmodel->save($data);
controllers/clan.php:	 $this->load->model("Clanmodel");
controllers/clan.php:	 $this->load->model("Sitemodel");
controllers/clan.php:	 $clan = $this->uri->segment(3);
controllers/clan.php:	 $data['clan'] = $this->Clanmodel->get($clan);
controllers/clan.php:	 $data['teams'] = $this->Clanmodel->get_teams($clan);
controllers/clan.php:	 $data['myclan'] = $this->Clanmodel->myclans();
controllers/clan.php:	 $data['myteams'] = $this->Clanmodel->myteams();
controllers/clan.php:	 $this->load->view("clan/challenge", $data);
controllers/clan.php:	 $clan = $this->uri->segment(3);
controllers/clan.php:	 $data['clan'] = $this->Clanmodel->get($clan);
controllers/clan.php:	 $data['teams'] = $this->Clanmodel->get_teams($clan);
controllers/clan.php:	 $this->load->view("clan/teams", $data);
controllers/clan.php:	 $clan = $this->uri->segment(3);
controllers/clan.php:         $data['games'] = $this->Sitemodel->get_games();
controllers/clan.php:	 $data['clan'] = $this->Clanmodel->get($clan);
controllers/clan.php:	 $data['members'] =  $this->Clanmodel->get_members($clan);
controllers/clan.php:	 $this->load->view("clan/addteam", $data);
controllers/clan.php:	 $clanid = $this->uri->segment(3);
controllers/clan.php:	 $clan = $this->Clanmodel->get($clanid);
controllers/clan.php:	 if ($this->input->post("password") == $clan->password) {
controllers/clan.php:		 $this->Clanmodel->join($clanid);
controllers/clan.php:         $clanid = $this->uri->segment(3);
controllers/clan.php:         $clan = $this->Clanmodel->get($clanid);
controllers/clan.php:         if ($this->Clanmodel->leave($clanid)) {
controllers/clan.php:	 $this->layout->view('login', $data);
controllers/clan.php:	 $data['clan'] = $this->Clanmodel->get($this->uri->segment(3));
controllers/clan.php:	 $data['inclan'] = $this->Clanmodel->inclan(user_id(), $data['clan']->id);
controllers/clan.php:	 $data['teams'] = $this->Clanmodel->get_teams($this->uri->segment(3));
controllers/clan.php:	 $data['members'] = $this->Clanmodel->get_members($this->uri->segment(3));
controllers/clan.php:	 $this->layout->view("clan/view", $data);
controllers/clan.php:	 $data['clans'] = $this->Clanmodel->get_all($this->input->post('search'));
controllers/clan.php:	 $this->layout->view("clan/list", $data);
controllers/clan.php:	$ref = $this->agent->referrer();
controllers/clan.php:	//echo $this->Usermodel->_prep_password("piadavid");
controllers/clan.php:	   $this->parser->parse('login', $data);
controllers/clan.php:          $user = $this->input->post('player');
controllers/clan.php:          if ($this->Playermodel->authenticate($user['email'], $user['password']))
controllers/clan.php:         $this->session->unset_userdata('loggedin');
controllers/clan.php:	 $this->load->view("player/information");
controllers/clan.php:	 $this->load->view("player/rig");
controllers/clan.php:	 $data['clan'] = $this->Clanmodel->get($this->uri->segment(3));
controllers/clan.php:	 $data['members'] = $this->Clanmodel->get_members($this->uri->segment(3));
controllers/clan.php:	 $data['countries'] = $this->Sitemodel->get_countries();
controllers/clan.php:	 $data['teams'] = $this->Clanmodel->get_teams($this->uri->segment(3));
controllers/clan.php:	 $this->layout->view("clan/edit", $data);
controllers/clan.php:         $this->layout->view("clan/register", $data);
controllers/clan.php:	 $this->layout->view("player/profile", $data);
controllers/clan.php:		$data = $this->input->post();
controllers/clan.php:		$id = $this->Clanmodel->save($data);
controllers/clan.php:		$this->do_upload($id);
controllers/clan.php:			$this->Clanmodel->join($id);
controllers/clan.php:		$data = $this->input->post();
controllers/clan.php:		$id = $this->Clanmodel->role_save($data);
controllers/clan.php:	 $data = $this->input->post();
controllers/clan.php:	 $data['clan'] = $this->uri->segment(3);
controllers/clan.php:	 $team = $this->Clanmodel->team_save($data);
controllers/clan.php:		$this->Clanmodel->playerteam_save($team, $pid, $role);
controllers/clan.php:        $this->load->library('upload', $config);
controllers/clan.php:        if (!$this->upload->do_upload($field))
controllers/clan.php:                        $error = array('error' => $this->upload->display_errors());
controllers/clan.php:                        message( $this->upload->display_errors(), "error");
controllers/clan.php:                        $info =  $this->upload->data();
controllers/clan.php:                        $id = $this->Clanmodel->save($data);
controllers/category.php:	 $this->load->model('Categorymodel');
controllers/category.php:         $this->load->model('Sitemodel');
controllers/category.php:         $this->load->model('Newsmodel');
controllers/category.php:        $this->load->library('upload', $config);
controllers/category.php:        if (!$this->upload->do_upload($field))
controllers/category.php:                        $error = array('error' => $this->upload->display_errors());
controllers/category.php:                        message( $this->upload->display_errors(), "error");
controllers/category.php:                        $info = $this->upload->data();
controllers/category.php:                        $id = $this->Categorymodel->save($data);
controllers/category.php:	 $data['sections'] = $this->Newsmodel->get_sections();
controllers/category.php:	 $data['categories'] = $this->Categorymodel->get_all();	
controllers/category.php:         $this->layout->view('category/index', $data);
controllers/category.php:	 $id = $this->uri->segment(3);
controllers/category.php:	 $member = $this->Membermodel->get($id);
controllers/category.php:         $this->layout->view('member/view', $data);
controllers/category.php:         if (!$this->session->userdata('loggedin'))
controllers/category.php:	 $id = $this->uri->segment(3, 0);
controllers/category.php:	 $data['category'] = $this->Categorymodel->get($id);
controllers/category.php:	 $data['sections'] = $this->Newsmodel->get_sections();
controllers/category.php:	 $data['ckeditor'] = $this->ckeditor;
controllers/category.php:	 $this->load->view("category/edit", $data);
controllers/category.php: 	$id = $this->Categorymodel->save($this->input->post());
controllers/category.php:	$this->do_upload($id);
controllers/category.php:	 echo form_dropdown('clientContact', $this->Clientmodel->contactlist($this->uri->segment(3, 0)), "");
controllers/category.php:	 $ref = $this->agent->referrer();
controllers/category.php:	 $id = $this->uri->segment(3, 0);
controllers/category.php:	 if ($this->Categorymodel->delete($id))
controllers/category.php:	 $id = $this->uri->segment(3, 0);
controllers/category.php:	 $users = $this->Employeemodel->get_authorised_count();	 
controllers/category.php:	 $limit = $this->Employeemodel->get_user_limit();
controllers/category.php:	  $user = $this->Employeemodel->get($id);
controllers/category.php:	  $this->parser->parse('employee/auth', $data);
controllers/user.php:	 $this->load->model("Usermodel");
controllers/user.php:	 $this->load->library('layout', 'layout_main');  
controllers/user.php:	 $this->layout->view('login');
controllers/user.php:	$ref = $this->agent->referrer();
controllers/user.php:	//echo $this->Usermodel->_prep_password("piadavid");
controllers/user.php:	   $this->parser->parse('login', $data);
controllers/user.php:          $user = $this->input->post('user');
controllers/user.php:          if ($this->Usermodel->authenticate($user['email'], $user['password']))
controllers/user.php:          $this->session->set_userdata('loggedin', true);
controllers/user.php:	  $this->session->set_flashdata('message', '<div class="success">Login successful.</div>');
controllers/user.php:	  $this->session->set_flashdata('message', '<div class="error">Login unsuccessful, please check your credentials and try again.</div>');
controllers/user.php:         $this->session->unset_userdata('loggedin');
controllers/user.php:	 $data['user'] = $this->Usermodel->get($this->uri->segment(3));
controllers/user.php:	 $this->load->view("users/edit", $data);
controllers/user.php:         $this->load->view("users/edit", $data);
controllers/user.php:		print_r($this->input->post());
controllers/user.php:		$this->Usermodel->save($this->input->post());
controllers/server.php:	 $id = $this->uri->segment(3);
controllers/server.php:	 $data['server'] = $this->Servermodel->get($id);
controllers/server.php:	 $data['games'] = $this->Sitemodel->get_games();
controllers/server.php:	 $this->load->view("server/edit", $data);
controllers/server.php:	 if ($this->check_me_first() > 0)
controllers/server.php:	  if ($this->db->insert("server_booking", $data))
controllers/server.php:	 $this->load->model("Servermodel");
controllers/server.php:         $this->load->model("Sitemodel");
controllers/server.php:	 $data['servers'] = $this->Servermodel->get_all();
controllers/server.php:	 $this->layout->view("server/list", $data);
controllers/server.php:         $data['servers'] = $this->Servermodel->get_all();
controllers/server.php:         $this->layout->view("server/management", $data);
controllers/server.php:	$this->form_validation->set_rules('password', 'Password', 'required');
controllers/server.php:	$this->form_validation->set_rules('date', 'Date', 'required');
controllers/server.php:	 if ($this->form_validation->run() == FALSE)
controllers/server.php:		$this->book();
controllers/server.php:	 $this->extra();
controllers/server.php:        $this->form_validation->set_rules('date', 'Date', 'required');
controllers/server.php:         if ($this->form_validation->run() == FALSE)
controllers/server.php:                $this->book();
controllers/server.php:         $this->extra(true);
controllers/server.php:	 $query = $this->db->query("SELECT * FROM server_booking WHERE '$start' BETWEEN `start` AND `end` AND '$end' BETWEEN `start` AND `end` AND server = $server");
controllers/server.php:	 $this->check_first();
controllers/server.php:	 $this->layout->view("server/control", $data);
controllers/server.php:         $data['mybookings'] = $this->mybookings();
controllers/server.php:	 $data['times'] = $this->times();
controllers/server.php:	 if ($this->uri->segment(3))
controllers/server.php:		$data['server'] = $this->uri->segment(3);
controllers/server.php:	 foreach ($this->Servermodel->get_password() as $pass)
controllers/server.php:	 foreach ($this->Servermodel->get_all() as $serv)
controllers/server.php:	 $this->layout->view("server/booking", $data);
controllers/server.php: $result = $this->db->query("SELECT sb.password, sb.id, DATE_FORMAT(sb.start, '%l %p') as start, DATE_FORMAT(sb.end, '%l %p') as end, DATE_FORMAT(sb.date, '%W %D %M') as date, s.name, sb.teamleader  FROM 
controllers/server.php:	 $id = $this->uri->segment(3);	
controllers/server.php:	 $this->db->where('id', $id);
controllers/server.php:	 $this->db->where('teamleader', $userid);
controllers/server.php:	 if ($this->db->delete("server_booking"))
controllers/server.php: $bookingid = $this->uri->segment(3);
controllers/server.php: $query = $this->db->query("SELECT * FROM server_booking WHERE '$now' BETWEEN `start` AND `end` AND teamleader = '$userid' AND id = $bookingid");
controllers/server.php:         $ref = $this->agent->referrer();
controllers/server.php:         $id = $this->uri->segment(3, 0);
controllers/server.php:         if ($this->Servermodel->delete($id))
controllers/server.php:        $id = $this->Servermodel->save($this->input->post());
controllers/server.php:                 message(ucfirst($this->router->class) ." changes saved successfully", 'message');
controllers/member.php:	 $this->load->model('Membermodel');
controllers/member.php:	 $data['members'] = $this->Membermodel->get_all();	
controllers/member.php:         $this->layout->view('member/index', $data);
controllers/member.php:	 $id = $this->uri->segment(3);
controllers/member.php:	 $member = $this->Membermodel->get($id);
controllers/member.php:         $this->layout->view('member/view', $data);
controllers/member.php:	 $ref = $this->agent->referrer();
controllers/member.php:	 $data['ckeditor'] = $this->ckeditor;
controllers/member.php:	 $this->layout->view('pages/add', $data);
controllers/member.php:         if (!$this->session->userdata('loggedin'))
controllers/member.php:	 $id = $this->uri->segment(3, 0);
controllers/member.php:	 $data['member'] = $this->Membermodel->get($id);
controllers/member.php:	 $data['ckeditor'] = $this->ckeditor;
controllers/member.php:	 $this->layout->view("member/edit", $data);
controllers/member.php: 	$id = $this->Membermodel->save($this->input->post());
controllers/member.php:                 $this->session->set_flashdata('message', '<div class="success">Page changes have been successfully recorded</div>');
controllers/member.php:	 echo form_dropdown('clientContact', $this->Clientmodel->contactlist($this->uri->segment(3, 0)), "");
controllers/member.php:	 $ref = $this->agent->referrer();
controllers/member.php:	 $id = $this->uri->segment(3, 0);
controllers/member.php:	 if ($this->Employeemodel->delete($id))
controllers/member.php:	  $this->session->set_flashdata('message', '<div class="success">Employee has been deleted.</div>');
controllers/member.php:	  $this->session->set_flashdata('message', '<div class="error">Unable to delete employee</div>');
controllers/member.php:	 $id = $this->uri->segment(3, 0);
controllers/member.php:	 $users = $this->Employeemodel->get_authorised_count();	 
controllers/member.php:	 $limit = $this->Employeemodel->get_user_limit();
controllers/member.php:	  $user = $this->Employeemodel->get($id);
controllers/member.php:	  $this->parser->parse('employee/auth', $data);
controllers/team.php:	 $this->load->model("Teammodel");
controllers/team.php:         $this->load->model("Clanmodel");
controllers/team.php:         $this->load->model("Sitemodel");
controllers/team.php:	 $this->load->library('layout', 'layout_main');  
controllers/team.php:	 $clan = $this->uri->segment(3);
controllers/team.php:	 $data['teams'] = $this->Clanmodel->get_teams($clan);
controllers/team.php:	 $this->load->view("clan/teams", $data);
controllers/team.php:	 $clan = $this->uri->segment(3);
controllers/team.php:	 $data['games'] = $this->Sitemodel->get_games();
controllers/team.php:	 $data['clan'] = $this->Clanmodel->get($clan);
controllers/team.php:	 $data['members'] =  $this->Clanmodel->get_members($clan);
controllers/team.php:	 $this->load->view("clan/addteam", $data);
controllers/team.php:	 $clanid = $this->uri->segment(3);
controllers/team.php:	 $clan = $this->Clanmodel->get($clanid);
controllers/team.php:	 if ($this->input->post("password") == $clan->password) {
controllers/team.php:		 $this->Clanmodel->join($clanid);
controllers/team.php:	 $this->layout->view('login', $data);
controllers/team.php:	 $id = $this->uri->segment(3);	
controllers/team.php:	 $data['teams'] = $this->Teammodel->get($id);
controllers/team.php:	 $data['clan'] = $this->Clanmodel->get($data['teams']->clan);
controllers/team.php:	 $this->layout->view("team/view", $data);
controllers/team.php:	 $data['clans'] = $this->Clanmodel->get_all();
controllers/team.php:	 $this->layout->view("clan/list", $data);
controllers/team.php:	$ref = $this->agent->referrer();
controllers/team.php:	//echo $this->Usermodel->_prep_password("piadavid");
controllers/team.php:	   $this->parser->parse('login', $data);
controllers/team.php:          $user = $this->input->post('player');
controllers/team.php:          if ($this->Playermodel->authenticate($user['email'], $user['password']))
controllers/team.php:         $this->session->unset_userdata('loggedin');
controllers/team.php:	 $this->load->view("player/information");
controllers/team.php:	 $this->load->view("player/rig");
controllers/team.php:	 $data['team'] = $this->Teammodel->get($this->uri->segment(3));
controllers/team.php:	 $this->session->set_userdata('clan', $data['team']->clan);
controllers/team.php:	 $data['members'] = $this->Teammodel->get_members($data['team']->clan);
controllers/team.php:	 $data['games'] = $this->Sitemodel->get_games();
controllers/team.php:	 $this->layout->view("team/edit", $data);
controllers/team.php:	$id = $this->uri->segment(3);
controllers/team.php:	$team = $this->Teammodel->get($id);
controllers/team.php:	$this->Teammodel->delete($id);
controllers/team.php:	 $id = $this->uri->segment(3);
controllers/team.php:	 $clan = $this->session->userdata("clan");
controllers/team.php:	 $this->Teammodel->delete_member($data);
controllers/team.php:         $this->layout->view("clan/register", $data);
controllers/team.php:	 $this->layout->view("player/profile", $data);
controllers/team.php:		$data = $this->input->post();
controllers/team.php:		$id = $this->Teammodel->save($data);
controllers/team.php:		$data = $this->input->post();
controllers/team.php:		$id = $this->Clanmodel->role_save($data);
controllers/team.php:	 $data = $this->input->post();
controllers/team.php:	 $team = $this->Teammodel->team_save($data);
controllers/team.php:	 $data['clan'] = $this->session->userdata("clan");
controllers/team.php:			$this->Teammodel->playerteam_save($player);
controllers/home.php:	$this->load->model("Newsmodel");
controllers/home.php:	$this->load->model("Homemodel");
controllers/home.php:	$offset=$this->uri->segment(3);
controllers/home.php:	$slider = $this->Homemodel->get_all(4,0,1);
controllers/home.php:	$config["total_rows"] = $this->Newsmodel->get_count(2);
controllers/home.php:	$ig['categories'] = $this->Newsmodel->get_categories(4, true, true);
controllers/home.php://	$ig['articles'] = $this->Homemodel->get_all($limit, $offset ,4);
controllers/home.php:	$data['infogrid'] = $this->load->view("home/infogrid", $ig, TRUE);
controllers/home.php:        $this->pagination->initialize($config);
controllers/home.php:        $data['articles'] = $this->Homemodel->get_all($limit, $offset ,2);
controllers/home.php:	$data['slider'] = $this->load->view("home/slider", $data2, TRUE);
controllers/home.php:        $this->layout->view('home/index', $data);
controllers/home.php:        $this->db->order_by('added', 'desc');
controllers/home.php:        $items = $this->db->get('log')->result();
controllers/home.php:	$this->layout->view("home/newsfeed", $data);
controllers/cron.php:	$this->load->model("Servermodel");
controllers/cron.php:$servers = $this->db->query("SELECT * FROM server_booking WHERE `start` = '$now'");
controllers/cron.php:$s = $this->Servermodel->get($server->server);
controllers/cron.php:$this->bc2conn->connect($s->ip, $s->port);
controllers/cron.php:$this->bc2conn->loginSecure($s->password);
controllers/cron.php:$this->bc2conn->adminVarSetGamepassword("$pass");
controllers/cron.php:$this->bc2conn->logout();
controllers/chat.php:		$this->layout->view('chatty', $data);		
controllers/chat.php:			$message = $this->input->post("message");
controllers/chat.php:			$this->db->query("INSERT INTO messages SET user='$name', msg='$message', time='$current'");		
controllers/chat.php:			$this->db->query("DELETE FROM messages WHERE id <= $delid");
controllers/chat.php:		$query = $this->db->query("$sql");
controllers/league.php:	 $this->load->model("Leaguemodel");
controllers/league.php:         $this->load->model("Sitemodel");
controllers/league.php:	 $this->load->model("Clanmodel");
controllers/league.php:	 $clan = $this->uri->segment(3);
controllers/league.php:	 $data['clan'] = $this->Clanmodel->get($clan);
controllers/league.php:	 $data['teams'] = $this->Clanmodel->get_teams($clan);
controllers/league.php:	 $data['myclan'] = $this->Clanmodel->myclans();
controllers/league.php:	 $data['myteams'] = $this->Clanmodel->myteams();
controllers/league.php:	 $this->load->view("clan/challenge", $data);
controllers/league.php:	 $t = $this->Leaguemodel->get($this->uri->segment(3));
controllers/league.php:	 $this->layout->view("league/rules", $data);
controllers/league.php:	 $this->info();
controllers/league.php:	 $clan = $this->uri->segment(3);
controllers/league.php:	 $data['clan'] = $this->Clanmodel->get($clan);
controllers/league.php:	 $data['teams'] = $this->Clanmodel->get_teams($clan);
controllers/league.php:	 $this->load->view("clan/teams", $data);
controllers/league.php:	 $clan = $this->uri->segment(3);
controllers/league.php:         $data['games'] = $this->Sitemodel->get_games();
controllers/league.php:	 $data['clan'] = $this->Clanmodel->get($clan);
controllers/league.php:	 $data['members'] =  $this->Clanmodel->get_members($clan);
controllers/league.php:	 $this->load->view("clan/addteam", $data);
controllers/league.php:	 $clanid = $this->uri->segment(3);
controllers/league.php:	 $clan = $this->Clanmodel->get($clanid);
controllers/league.php:	 if ($this->input->post("password") == $clan->password) {
controllers/league.php:		 $this->Clanmodel->join($clanid);
controllers/league.php:         $clanid = $this->uri->segment(3);
controllers/league.php:         $clan = $this->Clanmodel->get($clanid);
controllers/league.php:         if ($this->Clanmodel->leave($clanid)) {
controllers/league.php:	 $data['games'] = $this->Sitemodel->get_games(true);
controllers/league.php:	 $data['league'] = $this->Leaguemodel->get_all();
controllers/league.php:	 $this->layout->view('league/index', $data);
controllers/league.php:	 $data['clan'] = $this->Clanmodel->get($this->uri->segment(3));
controllers/league.php:	 $data['inclan'] = $this->Clanmodel->inclan(user()->id, $data['clan']->id);
controllers/league.php:	 $data['teams'] = $this->Clanmodel->get_teams($this->uri->segment(3));
controllers/league.php:	 $data['members'] = $this->Clanmodel->get_members($this->uri->segment(3));
controllers/league.php:	 $this->layout->view("clan/view", $data);
controllers/league.php:	 $data['clans'] = $this->Clanmodel->get_all($this->input->post('search'));
controllers/league.php:	 $this->layout->view("clan/list", $data);
controllers/league.php:	$ref = $this->agent->referrer();
controllers/league.php:	//echo $this->Usermodel->_prep_password("piadavid");
controllers/league.php:	   $this->parser->parse('login', $data);
controllers/league.php:          $user = $this->input->post('player');
controllers/league.php:          if ($this->Playermodel->authenticate($user['email'], $user['password']))
controllers/league.php:         $this->session->unset_userdata('loggedin');
controllers/league.php:	 $this->load->view("player/information");
controllers/league.php:	 $this->load->view("player/rig");
controllers/league.php:	 $this->add("edit");
controllers/league.php:         $data['league'] = $this->Leaguemodel->get($this->uri->segment(3));
controllers/league.php:	 $data['games'] = $this->Sitemodel->get_games();
controllers/league.php:	 $data['ckeditor'] = $this->ckeditor;
controllers/league.php:         $this->layout->view("league/edit", $data);
controllers/league.php:         $this->layout->view("clan/register", $data);
controllers/league.php:	 $this->layout->view("player/profile", $data);
controllers/league.php:		$data = $this->input->post();
controllers/league.php:		$id = $this->Leaguemodel->save($data);
controllers/league.php:		//	$this->Leaguemodel->join($id);
controllers/league.php:		$data = $this->input->post();
controllers/league.php:		$id = $this->Clanmodel->role_save($data);
controllers/league.php:	 $data = $this->input->post();
controllers/league.php:	 $data['clan'] = $this->uri->segment(3);
controllers/league.php:	 $team = $this->Clanmodel->team_save($data);
controllers/league.php:		$this->Clanmodel->playerteam_save($team, $pid, $role);
controllers/thumb.php:        $this->load->library('image_lib');
controllers/thumb.php:        $url = $this->uri->uri_to_assoc();
controllers/thumb.php:        $this->image_lib->initialize($config);
controllers/thumb.php:        $this->image_lib->resize();
controllers/thumb.php:	$url = $this->uri->uri_to_assoc();
controllers/thumb.php:        $this->image_lib->initialize($config);
controllers/thumb.php:        $this->image_lib->resize();
controllers/thumb.php:    	$url = $this->uri->uri_to_assoc();
controllers/thumb.php:        $this->image_lib->initialize($config);
controllers/thumb.php:        $this->image_lib->resize();
controllers/menu.php:	$this->load->model("Menumodel");
controllers/menu.php:	 $data['menu'] = $this->Menumodel->get($this->uri->segment(3));
controllers/menu.php:	 $data['structure'] = $this->Menumodel->MenuInfo();
controllers/menu.php:	 $data['menudisp'] = $this->Menumodel->buildMenu(0, "", "");
controllers/menu.php:	 $data['get_options'] = $this->Menumodel->get_cat_selectlist(0,0);
controllers/menu.php:	 $this->layout->view("menu/edit", $data);
controllers/menu.php:        $id = $this->Menumodel->save($this->input->post());
controllers/menu.php:                 message(ucfirst($this->router->class) ." changes saved successfully", 'message');
controllers/section.php:	 $this->load->model('Sectionmodel');
controllers/section.php:	 $data['members'] = $this->Membermodel->get_all();	
controllers/section.php:         $this->layout->view('member/index', $data);
controllers/section.php:	 $id = $this->uri->segment(3);
controllers/section.php:	 $member = $this->Membermodel->get($id);
controllers/section.php:         $this->layout->view('member/view', $data);
controllers/section.php:	 $ref = $this->agent->referrer();
controllers/section.php:	 $data['ckeditor'] = $this->ckeditor;
controllers/section.php:	 $this->layout->view('pages/add', $data);
controllers/section.php:         if (!$this->session->userdata('loggedin'))
controllers/section.php:	 $id = $this->uri->segment(3, 0);
controllers/section.php:	 $data['member'] = $this->Membermodel->get($id);
controllers/section.php:	 $data['ckeditor'] = $this->ckeditor;
controllers/section.php:	 $this->layout->view("member/edit", $data);
controllers/section.php: 	$id = $this->Membermodel->save($this->input->post());
controllers/section.php:                 $this->session->set_flashdata('message', '<div class="success">Page changes have been successfully recorded</div>');
controllers/section.php:	 echo form_dropdown('clientContact', $this->Clientmodel->contactlist($this->uri->segment(3, 0)), "");
controllers/section.php:	 $ref = $this->agent->referrer();
controllers/section.php:	 $id = $this->uri->segment(3, 0);
controllers/section.php:	 if ($this->Employeemodel->delete($id))
controllers/section.php:	  $this->session->set_flashdata('message', '<div class="success">Employee has been deleted.</div>');
controllers/section.php:	  $this->session->set_flashdata('message', '<div class="error">Unable to delete employee</div>');
controllers/section.php:	 $id = $this->uri->segment(3, 0);
controllers/section.php:	 $users = $this->Employeemodel->get_authorised_count();	 
controllers/section.php:	 $limit = $this->Employeemodel->get_user_limit();
controllers/section.php:	  $user = $this->Employeemodel->get($id);
controllers/section.php:	  $this->parser->parse('employee/auth', $data);
controllers/game.php:	 $this->load->model('Gamemodel');
controllers/game.php:         $this->load->model('Sitemodel');
controllers/game.php:         $this->load->model('Newsmodel');
controllers/game.php:        $this->load->library('upload', $config);
controllers/game.php:        if (!$this->upload->do_upload($field))
controllers/game.php:                        $error = array('error' => $this->upload->display_errors());
controllers/game.php:                        message( $this->upload->display_errors(), "error");
controllers/game.php:                        $info = $this->upload->data();
controllers/game.php:                        $id = $this->Gamemodel->save($data);
controllers/game.php:	 $data['games'] = $this->Gamemodel->get_all();	
controllers/game.php:         $this->layout->view('game/index', $data);
controllers/game.php:	 $id = $this->uri->segment(3);
controllers/game.php:	 $member = $this->Membermodel->get($id);
controllers/game.php:         $this->layout->view('member/view', $data);
controllers/game.php:         if (!$this->session->userdata('loggedin'))
controllers/game.php:	 $id = $this->uri->segment(3, 0);
controllers/game.php:	 $data['game'] = $this->Gamemodel->get($id);
controllers/game.php:	 $this->load->view("game/edit", $data);
controllers/game.php: 	$id = $this->Gamemodel->save($this->input->post());
controllers/game.php:	$this->do_upload($id);
controllers/game.php:                 message(ucfirst($this->router) ." changes saved successfully", 'message');
controllers/game.php:	 echo form_dropdown('clientContact', $this->Clientmodel->contactlist($this->uri->segment(3, 0)), "");
controllers/game.php:	 $ref = $this->agent->referrer();
controllers/game.php:	 $id = $this->uri->segment(3, 0);
controllers/game.php:	 if ($this->Categorymodel->delete($id))
controllers/game.php:	 $id = $this->uri->segment(3, 0);
controllers/game.php:	 $users = $this->Employeemodel->get_authorised_count();	 
controllers/game.php:	 $limit = $this->Employeemodel->get_user_limit();
controllers/game.php:	  $user = $this->Employeemodel->get($id);
controllers/game.php:	  $this->parser->parse('employee/auth', $data);
controllers/comment.php:	 $this->load->model("Commentmodel");
controllers/comment.php:		$this->Commentmodel->save($this->input->post());
controllers/comment.php:		$data['clients'] = $this->Clientmodel->get_all();
controllers/comment.php:		$this->load->view("client/dropbox", $data);
controllers/pages.php:	 $this->load->model('Pagesmodel');
controllers/pages.php:         $this->load->model('Newsmodel');
controllers/pages.php:         $this->load->model('Gallerymodel');
controllers/pages.php:        $alias = $this->uri->segment(3);
controllers/pages.php:         $page = $this->Pagesmodel->get($alias);
controllers/pages.php:         $this->layout->view('welcome_message', $data);
controllers/pages.php:	 $alias = $this->uri->segment(2);
controllers/pages.php:	 $page = $this->Pagesmodel->get($alias);
controllers/pages.php:		$slider = $this->slider(1);
controllers/pages.php:		$slider2 =  $this->slider(2);
controllers/pages.php:		$slider3 = $this->slider(3);
controllers/pages.php:	 $sidebar = $this->sidebar($page[0]->id);
controllers/pages.php:	 $data['sidebar'] .= $this->news();
controllers/pages.php:         $this->layout->view('welcome_message', $data);
controllers/pages.php:	 foreach ($this->Pagesmodel->get_sidebar($id) as $item)
controllers/pages.php:	 $alias = $this->uri->segment(3);
controllers/pages.php:	 $data['page'] = $this->Pagesmodel->get($alias);
controllers/pages.php:	 $this->layout->view("pages/edit", $data);
controllers/pages.php:	 $ref = $this->agent->referrer();
controllers/pages.php:	 $data['ckeditor'] = $this->ckeditor;
controllers/pages.php:	 $this->layout->view('pages/add', $data);
controllers/pages.php:         foreach ($this->Newsmodel->get_all() as $item)
controllers/pages.php:	 $images = $this->Gallerymodel->get_all_images();	
controllers/pages.php:        $id = $this->Pagesmodel->save($_POST);
controllers/admin.php:	$this->load->model("Pagesmodel");	
controllers/admin.php:	$this->load->model("Gallerymodel");
controllers/admin.php:        $this->load->model("Imagemodel");
controllers/admin.php:        $this->load->model("Clientmodel");
controllers/admin.php:        $this->load->model("Playermodel");
controllers/admin.php:        $this->load->model("Newsmodel");
controllers/admin.php:        $this->load->model("Usermodel");
controllers/admin.php:	$this->data['ckeditor'] = array(
controllers/admin.php:  $this->data['title'] = "Admin Section";
controllers/admin.php:  $this->data['sidebar'] = "<h3>Admin Menu</h3>".anchor('admin/pages', "Edit Pages");
controllers/admin.php:  $this->data['sidebar'] .= "<br/>".anchor('pages/add', "Add Page");
controllers/admin.php:  $this->data['sidebar'] .= "<h3>News Menu</h3>".anchor('admin/news', "View News");
controllers/admin.php:  $this->data['sidebar'] .= "<br/>".anchor('news/add', "Add News");
controllers/admin.php:  $this->layout->view("admin/index", $this->data);
controllers/admin.php:  $this->data['pages'] = $this->Pagesmodel->get_all();
controllers/admin.php:  $this->data['sidebar'] = "<h3>Current Pages <sub>select to edit</sub></h3>";
controllers/admin.php:  foreach ($this->data['pages'] as $page)
controllers/admin.php:	$this->data['sidebar'] .= "<p>".anchor("pages/edit/$page->alias", $page->title) . "</p>";
controllers/admin.php:  $this->data['sidebar'] .= "<p>".anchor("admin", "back") . "</p>";
controllers/admin.php:  $this->layout->view("admin/pages", $this->data);
controllers/admin.php:	$data['news'] = $this->Newsmodel->get_all();
controllers/admin.php:	$this->parser->parse("admin/newslist", $data);
controllers/admin.php:  //$data['gallery'] = $this->Gallerymodel->get($gallery);
controllers/admin.php:  $this->layout->view('admin/addgallery', $data);  
controllers/admin.php:  $gal = $this->Gallerymodel->get();
controllers/admin.php:  $this->layout->view('admin/selectgallery', $data);
controllers/admin.php:  $gal = $this->uri->segment(3);
controllers/admin.php:	$gallery = $this->input->post('gallery');
controllers/admin.php:  $this->session->set_userdata('gallery', $gallery);
controllers/admin.php:  $data['gallery'] = $this->Gallerymodel->get($gallery);
controllers/admin.php:  $this->layout->view('admin/uploadimage', $data);
controllers/admin.php:	$data['users'] = $this->Playermodel->get_all();
controllers/admin.php:	$this->layout->view("admin/userlist", $data); 
controllers/admin.php:        $data['users'] = $this->Clientmodel->get_all();
controllers/admin.php:        $this->layout->view("admin/clientlist", $data);
controllers/admin.php:                $gallery = $this->session->userdata('gallery');
controllers/admin.php:                $id[] = $this->Gallerymodel->addimage($data);
controllers/admin.php:                echo $this->db->last_query();
controllers/admin.php:	$db = $this->input->get("db");
controllers/admin.php:		foreach ($this->input->get("listItem") as $item)
libraries/Layout.php:        $this->obj =& get_instance();
libraries/Layout.php:        $this->layout = $layout;
libraries/Layout.php:	$this->obj->load->model("Menumodel");
libraries/Layout.php:        $this->obj->load->model("Leaguemodel");
libraries/Layout.php:      $this->layout = $layout;
libraries/Layout.php:        $loadedData['content_for_layout'] = $this->obj->load->view($view,$data,true);
libraries/Layout.php:        $loadedData['menu'] = $this->obj->Menumodel->buildMenu(0, "item1", "item2");
libraries/Layout.php:		$loadedData['adminmenu'] = $this->obj->parser->parse("admin/menu", array(), true);
libraries/Layout.php:        $loadedData['usermenu'] = $this->obj->parser->parse("users/menu", $data3 , true);
libraries/Layout.php:	$loadedData['leagues'] = $this->obj->Leaguemodel->get_all();
libraries/Layout.php:            $output = $this->obj->load->view($this->layout, $loadedData, true);
libraries/Layout.php:            $this->obj->load->view($this->layout, $loadedData, false);
libraries/Teeworlds.php:		$this->ip = $ip;
libraries/Teeworlds.php:		$this->port = $port;
libraries/Teeworlds.php:			$b = fread($this->fp, 1);
libraries/Teeworlds.php:		$this->fp = fsockopen("udp://$this->ip", $this->port, $errno, $errstr, $timeout);
libraries/Teeworlds.php:		@socket_set_timeout($this->fp, $timeout);
libraries/Teeworlds.php:		fwrite($this->fp, $packet);
libraries/Teeworlds.php:		fread($this->fp,10);
libraries/Teeworlds.php:		$info = fread($this->fp,4); // "info"
libraries/Teeworlds.php:		$this->ping = round(1000*($restime-$reqtime));
libraries/Teeworlds.php:		$this->version = $this->readString();
libraries/Teeworlds.php:		$this->name = $this->readString();
libraries/Teeworlds.php:		$this->map = $this->readString();
libraries/Teeworlds.php:		$this->gametype = $this->readString();
libraries/Teeworlds.php:		$this->readString(); // unknown
libraries/Teeworlds.php:		$this->readString(); // unknown
libraries/Teeworlds.php:		$this->numplayers = $this->readString();
libraries/Teeworlds.php:		$this->maxplayers = $this->readString();
libraries/Teeworlds.php:		$this->players = array();
libraries/Teeworlds.php:		for ($i=0; $i<$this->numplayers; $i++) {
libraries/Teeworlds.php:			$player->name = $this->readString();
libraries/Teeworlds.php:			$player->score = intval($this->readString());
libraries/Teeworlds.php:			$this->players[] = $player;
libraries/Teeworlds.php:		fclose($this->fp);
libraries/BC2Conn.php:	 if($this->_serverIP == null) {
libraries/BC2Conn.php:                        $this->_serverIP = $serverIP;
libraries/BC2Conn.php:                        $this->_serverRconQueryPort = $serverRconQueryPort;
libraries/BC2Conn.php:                        $this->_connection = $this->_openConnection($debug);
libraries/BC2Conn.php:		if($this->_connection) {
libraries/BC2Conn.php:			$this->_closeConnection();
libraries/BC2Conn.php:			$this->_connection = false;
libraries/BC2Conn.php:		$packet = $this->_encodePacket(false, false, $this->_clientSequenceNr, $data);
libraries/BC2Conn.php:		$this->_clientSequenceNr = ($this->_clientSequenceNr + 1) & 0x3fffffff;
libraries/BC2Conn.php:			$encodedWords .= $this->_encodeInt32(strlen($strWord));
libraries/BC2Conn.php:		$numWords = $this->_decodeInt32($data);
libraries/BC2Conn.php:			$wordLen = $this->_decodeInt32(substr($data, $offset, 4));
libraries/BC2Conn.php:		$encodedHeader = $this->_encodeHeader($isFromServer, $isResponse, $sequence);
libraries/BC2Conn.php:		$encodedNumWords = $this->_encodeInt32(count($data));
libraries/BC2Conn.php:		list($wordsSize, $encodedWords) = $this->_encodeWords($data);
libraries/BC2Conn.php:		$encodedSize = $this->_encodeInt32($wordsSize + 12);
libraries/BC2Conn.php:		list($isFromServer, $isResponse, $sequence) = $this->_decodeHeader($data);
libraries/BC2Conn.php:		$wordsSize = $this->_decodeInt32(substr($data, 4, 4)) - 12;
libraries/BC2Conn.php:		$words = $this->_decodeWords($wordsSize, substr($data, 12));
libraries/BC2Conn.php:		if(strlen($data) < $this->_decodeInt32(substr($data, 4, 4)))
libraries/BC2Conn.php:		while(!$this->_containsCompletePacket($receiveBuffer)) {
libraries/BC2Conn.php:			if($this->_sockType == 1) {
libraries/BC2Conn.php:				$receiveBuffer .= socket_read($this->_sock, 4096);
libraries/BC2Conn.php:				$receiveBuffer .= fread($this->_sock, 4096);
libraries/BC2Conn.php:		$packetSize = $this->_decodeInt32(substr($receiveBuffer, 4, 4));
libraries/BC2Conn.php:			$this->_sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
libraries/BC2Conn.php:			@$connection = socket_connect($this->_sock, $this->_serverIP, $this->_serverRconQueryPort);
libraries/BC2Conn.php:				socket_set_block($this->_sock);
libraries/BC2Conn.php:			$this->_sockType = 1;
libraries/BC2Conn.php:				@$this->_sock = fsockopen("tcp://" . $this->_serverIP, $this->_serverRconQueryPort, $errno, $errstr, 500000);
libraries/BC2Conn.php:				if(!$this->_sock) {
libraries/BC2Conn.php:				@$this->_sock = fsockopen("tcp://" . $this->_serverIP, $this->_serverRconQueryPort);
libraries/BC2Conn.php:			$connection = $this->_sock;
libraries/BC2Conn.php:			$this->_sockType = 2;
libraries/BC2Conn.php:		$this->_clientRequest("quit");
libraries/BC2Conn.php:		if($this->_sockType == 1) {
libraries/BC2Conn.php:			socket_close($this->_sock);
libraries/BC2Conn.php:			fclose($this->_sock);
libraries/BC2Conn.php:		$this->_sockType = null;
libraries/BC2Conn.php:		$data = $this->_encodeClientRequest($clientRequest);
libraries/BC2Conn.php:		if($this->_sockType == 1) {
libraries/BC2Conn.php:			socket_write($this->_sock, $data, strlen($data));
libraries/BC2Conn.php:			fwrite($this->_sock, $data, strlen($data));
libraries/BC2Conn.php:		list($packet, $receiveBuffer) = $this->_receivePacket($receiveBuffer);
libraries/BC2Conn.php:		list($isFromServer, $isResponse, $sequence, $requestAnswer) = $this->_decodePacket($packet);
libraries/BC2Conn.php:		return $this->_connection;
libraries/BC2Conn.php:		$loginStatus = $this->_array2String($this->_clientRequest("login.plainText " . $rconPassword), 0);
libraries/BC2Conn.php:		if($loginStatus == $this->_globalVars['defaultServerResponse']) {
libraries/BC2Conn.php:			$this->_isLoggedIn = true;
libraries/BC2Conn.php:			return $this->_globalMsg['LOGIN_FAILED'];
libraries/BC2Conn.php:		$salt = $this->_array2String($this->_clientRequest("login.hashed"));
libraries/BC2Conn.php:		$hashedPW = $this->_hex_str($salt) . $rconPassword;
libraries/BC2Conn.php:		$loginStatus = $this->_array2String($this->_clientRequest("login.hashed " . $saltedHashedPW), 0);
libraries/BC2Conn.php:		if($loginStatus == $this->_globalVars['defaultServerResponse']) {
libraries/BC2Conn.php:			$this->_isLoggedIn = true;
libraries/BC2Conn.php:			return $this->_globalMsg['LOGIN_FAILED'];
libraries/BC2Conn.php:		$this->_isLoggedIn = false;
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("logout"), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("quit"), 0);
libraries/BC2Conn.php:		return $this->_isLoggedIn;
libraries/BC2Conn.php:		$mapNamesXML = simplexml_load_file(getcwd()."/server/".$this->_globalVars['mapsFileXML']);
libraries/BC2Conn.php:		$mapName = $this->_globalMsg['MAPNAME_NOT_FOUND'];
libraries/BC2Conn.php:		$playModesXML = simplexml_load_file(getcwd()."/server/".$this->_globalVars['playmodesFileXML']);
libraries/BC2Conn.php:		$playmodeName = $this->_globalMsg['PLAYMODE_NOT_FOUND'];
libraries/BC2Conn.php:		$squadNamesXML = simplexml_load_file(getcwd()."/server/".$this->_globalVars['squadnamesFileXML']);
libraries/BC2Conn.php:		$squadName = $this->_globalMsg['SQUAD_NOT_FOUND'];
libraries/BC2Conn.php:		$teamNameXML = simplexml_load_file(getcwd()."/server/".$this->_globalVars['teamnamesFileXML']);
libraries/BC2Conn.php:		$teamName = $this->_globalMsg['TEAM_NOT_FOUND'];
libraries/BC2Conn.php:		return $this->_serverIP;
libraries/BC2Conn.php:		if($this->_serverdata == null || !$this->_globalVars['cachingEnabled']) {
libraries/BC2Conn.php:			$this->_serverdata = $this->_clientRequest("serverInfo");
libraries/BC2Conn.php:		return $this->_serverdata;
libraries/BC2Conn.php:		$serverInfo = $this->getServerInfo();
libraries/BC2Conn.php:		return $this->_array2String($serverInfo);
libraries/BC2Conn.php:		$serverInfo = $this->getServerInfo();
libraries/BC2Conn.php:		return (int) $this->_array2String($serverInfo, 2);
libraries/BC2Conn.php:		$serverInfo = $this->getServerInfo();
libraries/BC2Conn.php:		return (int) $this->_array2String($serverInfo, 3);
libraries/BC2Conn.php:		$serverInfo = $this->getServerInfo();
libraries/BC2Conn.php:		return $this->_array2String($serverInfo, 4);
libraries/BC2Conn.php:		$serverInfo = $this->getServerInfo();
libraries/BC2Conn.php:		return $this->getPlaymodeName($this->getCurrentPlaymode());
libraries/BC2Conn.php:		$serverInfo = $this->getServerInfo();
libraries/BC2Conn.php:		return $this->_array2String($serverInfo, 5);
libraries/BC2Conn.php:		$serverInfo = $this->getServerInfo();
libraries/BC2Conn.php:		return $this->getMapName($this->getCurrentMap());
libraries/BC2Conn.php:		return $this->_clientRequest("version");
libraries/BC2Conn.php:		return (int) $this->_array2String($this->getVersion(), 2);
libraries/BC2Conn.php:		return $this->_array2String($this->getVersion());
libraries/BC2Conn.php:		return (int) $this->_array2String($this->getServerInfo(), 6);
libraries/BC2Conn.php:		return (int) $this->_array2String($this->getServerInfo(), 7);
libraries/BC2Conn.php:		return (int) $this->_array2String($this->getServerInfo(), 8);
libraries/BC2Conn.php:		return $this->_array2String($this->getServerInfo(), 9);
libraries/BC2Conn.php:		if($this->_playerdata == null || !$this->_globalVars['cachingEnabled']) {
libraries/BC2Conn.php:			$this->_playerdata = $this->_clientRequest("listPlayers all");
libraries/BC2Conn.php:		return $this->_playerdata;
libraries/BC2Conn.php:		$players = $this->getPlayerlist();
libraries/BC2Conn.php:		$playersAmount = $this->getCurrentPlayers();
libraries/BC2Conn.php:		return $this->_clientRequest("listPlayers " . $playerName);
libraries/BC2Conn.php:		return $this->isConnected();
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.gamePassword"));
libraries/BC2Conn.php:		if($this->_playerdata_admin == null || !$this->_globalVars['cachingEnabled']) {
libraries/BC2Conn.php:			$this->_playerdata_admin = $this->_clientRequest("admin.listPlayers all");
libraries/BC2Conn.php:		return $this->_playerdata_admin;
libraries/BC2Conn.php:		return $this->_clientRequest("admin.listPlayers " . $playerName);
libraries/BC2Conn.php:		return $this->_clientRequest("help");
libraries/BC2Conn.php:		return $this->_clientRequest("eventsEnabled");
libraries/BC2Conn.php:	//		return $this->_clientRequest("eventsEnabled " .
libraries/BC2Conn.php:	//		$this->_bool2String($boolean));
libraries/BC2Conn.php:		$playerInfo = $this->getPlayerdata($playerName);
libraries/BC2Conn.php:			return $this->_globalMsg['PLAYER_NOT_FOUND'];
libraries/BC2Conn.php:		return $this->_array2String($playerInfo, 12);
libraries/BC2Conn.php:		$playerInfo = $this->getPlayerdata($playerName);
libraries/BC2Conn.php:			return $this->_globalMsg['PLAYER_NOT_FOUND'];
libraries/BC2Conn.php:		return $this->_array2String($playerInfo, 13);
libraries/BC2Conn.php:		$playerInfo = $this->getPlayerdata($playerName);
libraries/BC2Conn.php:			return $this->_globalMsg['PLAYER_NOT_FOUND'];
libraries/BC2Conn.php:		return (int) $this->_array2String($playerInfo, 15);
libraries/BC2Conn.php:		$playerInfo = $this->getPlayerdata($playerName);
libraries/BC2Conn.php:			return $this->_globalMsg['PLAYER_NOT_FOUND'];
libraries/BC2Conn.php:		return (int) $this->_array2String($playerInfo, 16);
libraries/BC2Conn.php:		$playerInfo = $this->getPlayerdata($playerName);
libraries/BC2Conn.php:			return $this->_globalMsg['PLAYER_NOT_FOUND'];
libraries/BC2Conn.php:		return (int) $this->_array2String($playerInfo, 17);
libraries/BC2Conn.php:		$playerInfo = $this->getPlayerdata($playerName);
libraries/BC2Conn.php:			return $this->_globalMsg['PLAYER_NOT_FOUND'];
libraries/BC2Conn.php:		return (int) $this->_array2String($playerInfo, 18);
libraries/BC2Conn.php:		$playerInfo = $this->getPlayerdata($playerName);
libraries/BC2Conn.php:			return $this->_globalMsg['PLAYER_NOT_FOUND'];
libraries/BC2Conn.php:		return (int) $this->_array2String($playerInfo, 19);
libraries/BC2Conn.php:		$playerInfo = $this->getPlayerdata($playerName);
libraries/BC2Conn.php:			return $this->_globalMsg['PLAYER_NOT_FOUND'];
libraries/BC2Conn.php:		return (int) $this->_array2String($playerInfo, 20);
libraries/BC2Conn.php:		if($durationInMS > $this->_globalMsg['ADMIN_YELL_DURATION_MAX']) {
libraries/BC2Conn.php:			$durationInMS == $this->_globalMsg['ADMIN_YELL_DURATION_MAX'];
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("admin.yell " . $text . " " .
libraries/BC2Conn.php:		if($durationInMS > $this->_globalMsg['ADMIN_YELL_DURATION_MAX']) {
libraries/BC2Conn.php:			$durationInMS == $this->_globalMsg['ADMIN_YELL_DURATION_MAX'];
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("admin.yell " . $text . " " .
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("admin.say " . $text . " {%player%} " . $playerName), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("admin.say " . $text . " {%team%} " . $teamID), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("admin.say " . $text . " {%all%}"), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("admin.runNextLevel"), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("admin.restartMap"), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("admin.setPlaylist " . $playmodeURI), 0);
libraries/BC2Conn.php:		return $this->_clientRequest("admin.getPlaylists");
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("admin.getPlaylist"));
libraries/BC2Conn.php:		return $this->_clientRequest("mapList.load");
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("mapList.save"), 0);
libraries/BC2Conn.php:		$this->adminMaplistLoad();
libraries/BC2Conn.php:		return $this->_clientRequest("mapList.list");
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("mapList.clear"), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("mapList.remove " . $rowID), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("mapList.append " . $mapURI), 0);
libraries/BC2Conn.php:		return (int) $this->_array2String($this->_clientRequest("mapList.nextLevelIndex"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("mapList.nextLevelIndex " . $index), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("mapList.insert " . $index . " " . $mapURI), 0);
libraries/BC2Conn.php:		return $this->_clientRequest("admin.supportedMaps " . $playmode);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("admin.kickPlayer " . $playerName), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("admin.kickPlayer " . $playerName . " {%reason%} " . $reason), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("banList.add name " . $playerName . " " . $timerange));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("banList.add ip " . $playerIP . " " . $timerange), 0);
libraries/BC2Conn.php:		$playerGUID = $this->adminGetPlayerGUID($playerName);
libraries/BC2Conn.php:		if($playerGUID != $this->_globalMsg['PLAYER_NOT_FOUND']) {
libraries/BC2Conn.php:			return $this->_array2String($this->_clientRequest("banList.add guid " . $playerGUID . " " . $timerange), 0);
libraries/BC2Conn.php:			return $this->_globalMsg['PLAYER_NOT_FOUND'];
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("banList.save"), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("banList.load"), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("banList.remove name " . $playerName), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("banList.remove ip " . $playerIP), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("banList.clear"), 0);
libraries/BC2Conn.php:		return $this->_clientRequest("banList.list");
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("reservedSlots.load"), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("reservedSlots.save"), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("reservedSlots.addPlayer " . $playerName), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("reservedSlots.removePlayer " . $playerName), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("reservedSlots.clear"), 0);
libraries/BC2Conn.php:		return $this->_clientRequest("reservedSlots.list");
libraries/BC2Conn.php:		$playerInfo = $this->adminGetPlayerdata($playerName);
libraries/BC2Conn.php:			return $this->_globalMsg['PLAYER_NOT_FOUND'];
libraries/BC2Conn.php:		return $this->_array2String($playerInfo, 14);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("admin.killPlayer " .
libraries/BC2Conn.php:		$playerTeam = $this->getPlayerTeamID($playerName);
libraries/BC2Conn.php:		$forceKill = $this->_bool2String($forceKill);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("admin.movePlayer " .
libraries/BC2Conn.php:			$newTeamID = $this->getPlayerTeamID($playerName);
libraries/BC2Conn.php:		$forceKill = $this->_bool2String($forceKill);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("admin.movePlayer " .
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("admin.endRound " . $teamId), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.gamePassword " . $serverPassword), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.punkBuster " .
libraries/BC2Conn.php:		$this->_bool2String($boolean)), 0);
libraries/BC2Conn.php:		return $this->_array2boolean($this->_clientRequest("vars.punkBuster"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.adminPassword " . $string), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.adminPassword"), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.hardCore " .
libraries/BC2Conn.php:		$this->_bool2String($boolean)), 0);
libraries/BC2Conn.php:		return $this->_array2boolean($this->_clientRequest("vars.hardCore"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.ranked " .
libraries/BC2Conn.php:		$this->_bool2String($boolean)), 0);
libraries/BC2Conn.php:		return $this->_array2boolean($this->_clientRequest("vars.ranked"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.rankLimit " . $integer), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.rankLimit"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.teamBalance " .
libraries/BC2Conn.php:		$this->_bool2String($boolean)), 0);
libraries/BC2Conn.php:		return $this->_array2boolean($this->_clientRequest("vars.teamBalance"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.friendlyFire " .
libraries/BC2Conn.php:		$this->_bool2String($boolean)), 0);
libraries/BC2Conn.php:		return $this->_array2boolean($this->_clientRequest("vars.friendlyFire"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.bannerUrl " . $string), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.bannerUrl"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.serverDescription " . $string), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.serverDescription"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.killCam " .
libraries/BC2Conn.php:		$this->_bool2String($boolean)), 0);
libraries/BC2Conn.php:		return $this->_array2boolean($this->_clientRequest("vars.killCam"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.miniMap " .
libraries/BC2Conn.php:		$this->_bool2String($boolean)), 0);
libraries/BC2Conn.php:		return $this->_array2boolean($this->_clientRequest("vars.miniMap"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.crossHair " .
libraries/BC2Conn.php:		$this->_bool2String($boolean)), 0);
libraries/BC2Conn.php:		return $this->_array2boolean($this->_clientRequest("vars.crossHair"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.3dSpotting " .
libraries/BC2Conn.php:		$this->_bool2String($boolean)), 0);
libraries/BC2Conn.php:		return $this->_array2boolean($this->_clientRequest("vars.3dSpotting"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.miniMapSpotting " .
libraries/BC2Conn.php:		$this->_bool2String($boolean)), 0);
libraries/BC2Conn.php:		return $this->_array2boolean($this->_clientRequest("vars.miniMapSpotting"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.thirdPersonVehicleCameras " .
libraries/BC2Conn.php:		$this->_bool2String($boolean)), 0);
libraries/BC2Conn.php:		return $this->_array2boolean($this->_clientRequest("vars.thirdPersonVehicleCameras"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.serverName " . $serverName), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.teamKillCountForKick " . $teamKillCountInteger), 0);
libraries/BC2Conn.php:		return (int) $this->_array2String($this->_clientRequest("vars.teamKillCountForKick"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.teamKillValueForKick " . $teamKillValueInteger), 0);
libraries/BC2Conn.php:		return (int) $this->_array2String($this->_clientRequest("vars.teamKillValueForKick"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.teamKillValueIncrease " . $integer), 0);
libraries/BC2Conn.php:		return (int) $this->_array2String($this->_clientRequest("vars.teamKillValueIncrease"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.teamKillValueDecreasePerSecond " . v), 0);
libraries/BC2Conn.php:		return (int) $this->_array2String($this->_clientRequest("vars.teamKillValueDecreasePerSecond"));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.idleTimeout " . $timeInSeconds), 0);
libraries/BC2Conn.php:		return (int) $this->_array2String($this->_clientRequest("vars.idleTimeout " . $timeInSeconds));
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.profanityFilter " . $this->_bool2String($boolean)), 0);
libraries/BC2Conn.php:		return $this->_array2boolean($this->_clientRequest("vars.profanityFilter"));
libraries/BC2Conn.php:		return (int) $this->_array2String($this->_clientRequest("vars.currentPlayerLimit"), 0);
libraries/BC2Conn.php:		return (int) $this->_array2String($this->_clientRequest("vars.maxPlayerLimit"), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.playerLimit " . $playerLimit), 0);
libraries/BC2Conn.php:		return (int) $this->_array2String($this->_clientRequest("vars.playerLimit"), 0);
libraries/BC2Conn.php:		return $this->_array2String($this->_clientRequest("vars.textChatModerationMode free"), 0);
libraries/BC2Conn.php:		return $this->_array2boolean($this->_clientRequest("vars.textChatModerationMode"));
models/sitemodel.php:	$query = $this->db->get('jos_egsa_game');
models/sitemodel.php:        $query = $this->db->get('jos_bl_countries');
models/teammodel.php:     	$this->db->where('id', $id);
models/teammodel.php:        $query = $this->db->get('jos_bl_teams');
models/teammodel.php:	$item->members = $this->get_teammembers($id);
models/teammodel.php:	$this->db->where('id', $data['id']);
models/teammodel.php:	if ($this->db->delete('jos_bl_players_team', $data))
models/teammodel.php:        $this->db->where('id', $id);
models/teammodel.php:        $this->db->delete('jos_bl_teams');
models/teammodel.php:	$this->db->where('team_id', $id);
models/teammodel.php:	if ($this->db->delete('jos_bl_players_team'))
models/teammodel.php:	$userid = $this->session->userdata("user")->id;
models/teammodel.php:	$this->db->insert('jos_bl_clanmembers', $data);
models/teammodel.php:        return $this->db->insert_id();
models/teammodel.php:        $this->db->where('roleid', $id);
models/teammodel.php:        $query = $this->db->get('jos_bl_roles');
models/teammodel.php:        $this->db->where('clan', $clan);
models/teammodel.php:        $query = $this->db->get('jos_bl_teams');
models/teammodel.php:	 $item->members = $this->get_teammembers($item->id);
models/teammodel.php:       $this->db->where('team_id', $team);
models/teammodel.php:        $this->db->or_where('team_id', $team2);
models/teammodel.php:       $this->db->where('role >=', 3);
models/teammodel.php:       $query = $this->db->get('jos_bl_players_team');
models/teammodel.php:     	$this->db->where('team_id', $team);
models/teammodel.php:        $query = $this->db->get('jos_bl_players_team');
models/teammodel.php:	$this->db->where('cid', $clan);
models/teammodel.php:        $query = $this->db->get('jos_bl_clanmembers');
models/teammodel.php:	//$query = $this->db->query("SELECT *, COUNT(jos_bl_clanmembers.joined) as members FROM jos_bl_clan, jos_bl_clanmembers WHERE jos_bl_clan.id = jos_bl_clanmembers.cid");
models/teammodel.php:        $query = $this->db->get('jos_bl_clan');
models/teammodel.php:         $members = sizeof($this->get_members($item->id));
models/teammodel.php:         $this->db->where('id', $data['id']);
models/teammodel.php:         $this->db->update('jos_bl_teams', $data);
models/teammodel.php:         $this->db->insert('jos_bl_teams', $data);
models/teammodel.php:         return $this->db->insert_id();
models/teammodel.php:	  $this->db->where('id', $data['id']);
models/teammodel.php:	  $this->db->update('jos_bl_teams', $data);
models/teammodel.php:	  $data['create_by'] = $this->session->userdata("user")->id;
models/teammodel.php:	  $this->db->insert('jos_bl_teams', $data);
models/teammodel.php:          return $this->db->insert_id();
models/teammodel.php:	 $this->db->where('id', $data['id']);
models/teammodel.php:	 $this->db->update('jos_bl_players_team', $data);
models/teammodel.php://	 echo "<br/>".$this->db->last_query();
models/teammodel.php:         $this->db->insert('jos_bl_players_team', $data);
models/teammodel.php:         return $this->db->insert_id();
models/teammodel.php:         $this->db->where('id', $item['id']);
models/teammodel.php:         $this->db->update('jos_bl_clanmembers', $item);
models/teammodel.php:     	return sha1($password.$this->config->item('encryption_key'));
models/leaguemodel.php:	$query = $this->db->query('SELECT t.t_alias, t.name as name, g.name as game, t.id as id, t.descr as `desc`, t.rules, g.abbv FROM jos_bl_tournament t, jos_egsa_game g WHERE t.game = 
models/leaguemodel.php:	$this->db->where("t_alias", $alias);
models/leaguemodel.php:  	$query = $this->db->get('jos_bl_tournament');
models/leaguemodel.php:	$tournament['rules'] = $this->rules($tourn->id);
models/leaguemodel.php:  	$this->db->where("t_id", $id);
models/leaguemodel.php:        $query = $this->db->get('egsa_rules');
models/leaguemodel.php:         $this->db->where('id', $data['id']);
models/leaguemodel.php:         $this->db->update('jos_bl_tournament', $data);
models/leaguemodel.php:         $this->db->insert('jos_bl_tournament', $data);
models/leaguemodel.php:         $id = $this->db->insert_id();
models/commentmodel.php:	$this->db->where("controller", $controller);
models/commentmodel.php:	$this->db->where("oid", $oid);
models/commentmodel.php:	$this->db->order_by("id", "DESC");
models/commentmodel.php:	$query = $this->db->get("jos_bl_comments");
models/commentmodel.php:	if ($this->db->insert("jos_bl_comments", $data))
models/categorymodel.php:     	$this->db->where('id', $id);
models/categorymodel.php:        $query = $this->db->get('jos_categories');
models/categorymodel.php:        $this->db->where('id', $id);
models/categorymodel.php:        if ($this->db->delete('jos_categories'))
models/categorymodel.php:        $query = $this->db->get('jos_categories');
models/categorymodel.php:         $this->db->where('id', $data['id']);
models/categorymodel.php:         $this->db->update('jos_categories', $data);
models/categorymodel.php:         $this->db->insert('jos_categories', $data);
models/categorymodel.php:         return $this->db->insert_id();
models/newsmodel.php:	$this->db->where('id', $id);
models/newsmodel.php:        if ($this->db->delete('jos_content'))
models/newsmodel.php:                $this->db->where('sectionid', $s);
models/newsmodel.php:	$this->db->where('state', 1);
models/newsmodel.php:        $this->db->order_by('ordering');
models/newsmodel.php:        $query = $this->db->get('jos_content');
models/newsmodel.php:	 $this->db->order_by("ordering");
models/newsmodel.php:	 $this->db->where("section", $id);
models/newsmodel.php:		$this->db->where("published", 1);
models/newsmodel.php:         $query = $this->db->get('jos_categories');
models/newsmodel.php:	 $query = $this->db->get('jos_sections');
models/newsmodel.php:	 $this->db->where('id', $alias);
models/newsmodel.php:	 $this->db->where('alias', $alias);
models/newsmodel.php:	$query = $this->db->get('jos_content');
models/newsmodel.php:		$this->db->where('sectionid', $s);
models/newsmodel.php:	$this->db->order_by('ordering');
models/newsmodel.php://	$this->db->limit();
models/newsmodel.php:        $query = $this->db->get('jos_content');
models/newsmodel.php:         $this->db->where('id', $data['id']);
models/newsmodel.php:         if ($this->db->update('jos_content', $data))
models/newsmodel.php:         $this->db->insert('jos_content', $data);
models/newsmodel.php:         return $this->db->insert_id();
models/dropboxmodel.php:  $this->db->order_by('id', "DESC");
models/dropboxmodel.php:	$this->db->where('id', $id);
models/dropboxmodel.php:	 $this->db->where('folder', $folder);
models/dropboxmodel.php:  $query = $this->db->get('dropbox');
models/dropboxmodel.php:  $this->db->insert('dropbox', $data);
models/dropboxmodel.php:  $this->db->order_by('added', "DESC");
models/dropboxmodel.php:  $this->db->where('album', $id);
models/dropboxmodel.php:  $query = $this->db->get('images');
models/dropboxmodel.php:  $this->db->order_by("RAND()");
models/dropboxmodel.php:  $query = $this->db->get('images');
models/dropboxmodel.php:  $this->db->where('id', $id);
models/dropboxmodel.php:  $query = $this->db->get('images');
models/dropboxmodel.php:         $this->db->where('id', $data['id']);
models/dropboxmodel.php:         $this->db->update('gallery', $data);
models/dropboxmodel.php:         $this->db->insert('gallery', $data);
models/dropboxmodel.php:         return $this->db->insert_id();
models/dropboxmodel.php:        $item = $this->get($id);
models/dropboxmodel.php:        $this->db->where('id', $id);
models/dropboxmodel.php:        if ($this->db->delete('dropbox')) {
models/pagesmodel.php:	$this->db->where('id', $id);
models/pagesmodel.php:        if ($this->db->delete('employee'))
models/pagesmodel.php:	 $this->db->where('id', $alias);
models/pagesmodel.php:     	 $this->db->where('alias', $alias);
models/pagesmodel.php:	$query = $this->db->get('pages');
models/pagesmodel.php:	$this->db->where('page', $id);
models/pagesmodel.php:	$query = $this->db->get('sidebar');
models/pagesmodel.php:        $query = $this->db->get('pages');
models/pagesmodel.php:         $this->db->where('id', $data['id']);
models/pagesmodel.php:         $this->db->update('pages', $data);
models/pagesmodel.php:         $this->db->insert('pages', $data);
models/pagesmodel.php:         return $this->db->insert_id();
models/pagesmodel.php:	$data['company'] = $this->session->userdata('user')->company;
models/pagesmodel.php:	$data['PASSWORD'] = $this->_prep_password($data['PASSWORD']);
models/pagesmodel.php:	$this->db->set('id', $data['id']);
models/pagesmodel.php:	$this->db->set('group', 1);
models/pagesmodel.php:	$this->db->set('username', $data['username']);
models/pagesmodel.php:	$this->db->set('PASSWORD', $data['PASSWORD']);
models/pagesmodel.php:	if ($this->db->insert('authorised'))
models/pagesmodel.php:	$user = $this->get($id);
models/pagesmodel.php:	if ($user['details'][0]->company != $this->session->userdata('user')->company)
models/pagesmodel.php:	$this->db->where('id', $id);
models/pagesmodel.php:        if ($this->db->delete('authorised'))
models/pagesmodel.php:        return sha1($password.$this->config->item('encryption_key'));
models/imagemodel.php:  $this->db->order_by('id', "DESC");
models/imagemodel.php:	$this->db->where('id', $id);
models/imagemodel.php:  $query = $this->db->get('gallery');
models/imagemodel.php:  $this->db->insert('images', $data);
models/imagemodel.php:  $this->db->order_by('added', "DESC");
models/imagemodel.php:  $this->db->where('album', $id);
models/imagemodel.php:  $query = $this->db->get('images');
models/imagemodel.php:  $this->db->order_by("RAND()");
models/imagemodel.php:  $query = $this->db->get('images');
models/imagemodel.php:  $this->db->where('id', $id);
models/imagemodel.php:  $query = $this->db->get('images');
models/imagemodel.php:         $this->db->where('id', $data['id']);
models/imagemodel.php:         $this->db->update('images', $data);
models/imagemodel.php:         $this->db->insert('images', $data);
models/imagemodel.php:         return $this->db->insert_id();
models/imagemodel.php:     	$item = $this->get_image($id);
models/imagemodel.php:        $this->db->where('id', $id);
models/imagemodel.php:        if ($this->db->delete('images')) {
models/homemodel.php:	$this->db->where('id', $id);
models/homemodel.php:        if ($this->db->delete('employee'))
models/homemodel.php:	 $this->db->where('id', $alias);
models/homemodel.php:     	 $this->db->where('alias', $alias);
models/homemodel.php:	$query = $this->db->get('jos_content');
models/homemodel.php:	$this->db->where('page', $id);
models/homemodel.php:	$query = $this->db->get('sidebar');
models/homemodel.php:		$this->db->where('sectionid', $s);
models/homemodel.php:		 $this->db->where('catid', $c);
models/homemodel.php:	 $this->db->limit($limit, $offset);
models/homemodel.php:	//$this->db->where('sectionid', 2);
models/homemodel.php:	$this->db->where('state', 1);
models/homemodel.php:	$this->db->order_by('ordering');
models/homemodel.php:        $query = $this->db->get('jos_content');
models/homemodel.php:         $this->db->where('id', $data['id']);
models/homemodel.php:         $this->db->update('jos_content', $data);
models/homemodel.php:         $this->db->insert('jos_content', $data);
models/homemodel.php:         return $this->db->insert_id();
models/homemodel.php:	$data['company'] = $this->session->userdata('user')->company;
models/homemodel.php:	$data['PASSWORD'] = $this->_prep_password($data['PASSWORD']);
models/homemodel.php:	$this->db->set('id', $data['id']);
models/homemodel.php:	$this->db->set('group', 1);
models/homemodel.php:	$this->db->set('username', $data['username']);
models/homemodel.php:	$this->db->set('PASSWORD', $data['PASSWORD']);
models/homemodel.php:	if ($this->db->insert('authorised'))
models/homemodel.php:	$user = $this->get($id);
models/homemodel.php:	if ($user['details'][0]->company != $this->session->userdata('user')->company)
models/homemodel.php:	$this->db->where('id', $id);
models/homemodel.php:        if ($this->db->delete('authorised'))
models/homemodel.php:        return sha1($password.$this->config->item('encryption_key'));
models/membersmodel:	$this->db->where('id', $id);
models/membersmodel:        if ($this->db->delete('employee'))
models/membersmodel:	 $this->db->where('id', $alias);
models/membersmodel:     	 $this->db->where('alias', $alias);
models/membersmodel:	$query = $this->db->get('pages');
models/membersmodel:	$this->db->where('page', $id);
models/membersmodel:	$query = $this->db->get('sidebar');
models/membersmodel:        $query = $this->db->get('pages');
models/membersmodel:         $this->db->where('id', $data['id']);
models/membersmodel:         $this->db->update('pages', $data);
models/membersmodel:         $this->db->insert('pages', $data);
models/membersmodel:         return $this->db->insert_id();
models/membersmodel:	$data['company'] = $this->session->userdata('user')->company;
models/membersmodel:	$data['PASSWORD'] = $this->_prep_password($data['PASSWORD']);
models/membersmodel:	$this->db->set('id', $data['id']);
models/membersmodel:	$this->db->set('group', 1);
models/membersmodel:	$this->db->set('username', $data['username']);
models/membersmodel:	$this->db->set('PASSWORD', $data['PASSWORD']);
models/membersmodel:	if ($this->db->insert('authorised'))
models/membersmodel:	$user = $this->get($id);
models/membersmodel:	if ($user['details'][0]->company != $this->session->userdata('user')->company)
models/membersmodel:	$this->db->where('id', $id);
models/membersmodel:        if ($this->db->delete('authorised'))
models/membersmodel:        return sha1($password.$this->config->item('encryption_key'));
models/gallerymodel.php:	$this->db->or_where('level', 2);
models/gallerymodel.php:        $this->db->or_where('level', 1);
models/gallerymodel.php:	$this->db->or_where('level', 1);
models/gallerymodel.php:	$this->db->where('id', $id);
models/gallerymodel.php:  $this->db->order_by('ordering');
models/gallerymodel.php:  $query = $this->db->get('gallery');
models/gallerymodel.php:  $this->db->insert('images', $data);
models/gallerymodel.php:  $this->db->order_by('ordering');
models/gallerymodel.php:  $this->db->where('album', $id);
models/gallerymodel.php:  $query = $this->db->get('images');
models/gallerymodel.php:  $this->db->order_by("RAND()");
models/gallerymodel.php:  $query = $this->db->get('images');
models/gallerymodel.php:  $this->db->where('id', $id);
models/gallerymodel.php:  $query = $this->db->get('images');
models/gallerymodel.php:         $this->db->where('id', $data['id']);
models/gallerymodel.php:         $this->db->update('gallery', $data);
models/gallerymodel.php:         $this->db->insert('gallery', $data);
models/gallerymodel.php:         return $this->db->insert_id();
models/gallerymodel.php:     	$item = $this->get_image($id);
models/gallerymodel.php:        $this->db->where('id', $id);
models/gallerymodel.php:        if ($this->db->delete('images')) {
models/usermodel.php:     	$this->db->where('id', $id);
models/usermodel.php:        $query = $this->db->get('jos_users');
models/usermodel.php:        $query = $this->db->get('jos_users');
models/usermodel.php:     $this->db->where('username', $username);
models/usermodel.php:     $this->db->where('password', $this->_prep_password($password));
models/usermodel.php:     $query = $this->db->get('jos_users', 1);
models/usermodel.php:	   $user = $this->get($id);
models/usermodel.php:	   $this->session->set_userdata('user', $user);
models/usermodel.php:	   $this->session->set_userdata('loggedin', true);
models/usermodel.php:	 $data['password'] = $this->_prep_password($data['password']);
models/usermodel.php:         $this->db->where('id', $data['id']);
models/usermodel.php:         $this->db->update('jos_users', $data);
models/usermodel.php:         $this->db->insert('jos_users', $data);
models/usermodel.php:         return $this->db->insert_id();
models/usermodel.php:     	return sha1($password.$this->config->item('encryption_key'));
models/gamemodel.php:     	$this->db->where('id', $id);
models/gamemodel.php:        $query = $this->db->get('jos_egsa_game');
models/gamemodel.php:        $this->db->where('id', $id);
models/gamemodel.php:        if ($this->db->delete('jos_egsa_game'))
models/gamemodel.php:        $query = $this->db->get('jos_egsa_game');
models/gamemodel.php:         $this->db->where('id', $data['id']);
models/gamemodel.php:         $this->db->update('jos_egsa_game', $data);
models/gamemodel.php:         $this->db->insert('jos_egsa_game', $data);
models/gamemodel.php:         return $this->db->insert_id();
models/menumodel.php:                $rs = $this->db->query("SELECT * FROM menu_items WHERE parent = $parent");
models/menumodel.php:		//$this->db->cache_on();
models/menumodel.php:		$this->items = $this->MenuInfo();
models/menumodel.php:	 $this->db->where('id', $id);
models/menumodel.php:	 $query = $this->db->get("menu_items");
models/menumodel.php:                $rs = $this->db->query("SELECT * FROM menu_items WHERE id = $id");
models/menumodel.php:                $this->name = $item->name;
models/menumodel.php:                $this->description = $item->description;
models/menumodel.php:                $this->id = $item->id;
models/menumodel.php:                $this->alias = $item->alias;
models/menumodel.php:                $this->type = $item->type;
models/menumodel.php:                $this->link = $item->link;
models/menumodel.php:                $this->parent = $item->parent;
models/menumodel.php:                $this->pageid = $item->pageid;
models/menumodel.php:                $this->display_order = $item->display_order;
models/menumodel.php:                $pos = strpos($this->link, ".");
models/menumodel.php:                $this->module = substr($this->link, 0, $pos);
models/menumodel.php:        $menuData = $this->items;
models/menumodel.php:                $this->path = '';
models/menumodel.php:                $this->GetMenuPath($itemId);
models/menumodel.php:                if ($this->hasKids($itemId))
models/menumodel.php:		 $meh['menu_items'] = $this->get_kids($menuData['items'][$itemId]['parent']);
models/menumodel.php:                        $html .= $this->parser->parse("menu/sub", $meh, true);
models/menumodel.php:            $html .= $this->buildMenu($itemId, $class, $sub);
models/menumodel.php:                $rs = $this->db->query("SELECT * FROM menu_items WHERE visible = 1 AND site = 0 ORDER BY parent, display_order");
models/menumodel.php:         $this->GetItem($id);
models/menumodel.php:         if ($this->parent == 0) {
models/menumodel.php:                $this->path="";
models/menumodel.php:                $this->lists[] = $this->alias;
models/menumodel.php:                for ($i=sizeof($this->lists)-1;$i>0;$i--)
models/menumodel.php:                $this->path .= $this->lists[$i] . "/";
models/menumodel.php:                $this->lists = "";
models/menumodel.php:                $this->path="";
models/menumodel.php:                $this->lists[] = $this->alias;
models/menumodel.php:                $this->GetMenuPath($this->parent);
models/menumodel.php:        $rs = $this->db->query("SELECT * FROM menu_items WHERE parent = $parent");
models/menumodel.php:        $rs = $this->db->query("SELECT * FROM menu_items WHERE parent = $parent");
models/menumodel.php:	$query = $this->db->query('SELECT * from menu_items where parent = '.$current_cat_id. ' ORDER BY display_order');
models/menumodel.php:	$this->get_cat_selectlist($option->id, $count);
models/menumodel.php:         $this->db->where('id', $data['id']);
models/menumodel.php:         $this->db->update('menu_items', $data);
models/menumodel.php:         $this->db->insert('menu_items', $data);
models/menumodel.php:         return $this->db->insert_id();
models/clanmodel.php:     	$this->db->where('id', $id);
models/clanmodel.php:        $query = $this->db->get('jos_bl_clan');
models/clanmodel.php: 	$members = sizeof($this->get_members($item->id));
models/clanmodel.php:        $item->teams = sizeof($this->get_teams($item->id));
models/clanmodel.php:	$this->db->insert('jos_bl_clanmembers', $data);
models/clanmodel.php:	$c = $this->get($clan);
models/clanmodel.php:        return $this->db->insert_id();
models/clanmodel.php:     	$userid = $this->session->userdata("user")->id;
models/clanmodel.php:	$this->db->where('playerid', user()->id);
models/clanmodel.php:	$this->db->where('cid', $clan);
models/clanmodel.php:        $this->db->delete('jos_bl_clanmembers', $data);
models/clanmodel.php:        $c = $this->get($clan);
models/clanmodel.php:        $this->db->where('roleid', $id);
models/clanmodel.php:        $query = $this->db->get('jos_bl_roles');
models/clanmodel.php:        $this->db->where('clan', $clan);
models/clanmodel.php:        $query = $this->db->get('jos_bl_teams');
models/clanmodel.php:	 $item->members = $this->get_teammembers($item->id);
models/clanmodel.php:	$query = $this->db->query('SELECT *, c.id as cid FROM jos_bl_clan c, jos_bl_clanmembers cm WHERE cm.playerid = '.$pid.' AND c.id=cm.cid');
models/clanmodel.php:	$members = sizeof($this->get_members($item->cid));
models/clanmodel.php:        $item->teams = sizeof($this->get_teams($item->cid));
models/clanmodel.php:	//$clan['teams'] = $this->myteams();
models/clanmodel.php:        $query = $this->db->query('SELECT t.id, t.t_name, t.clan, t.added, pt.added as joined, c.name as clanname, pt.role, pt.team_id, c.tag FROM jos_bl_players_team pt, jos_bl_teams t, jos_bl_clan c WHERE c.id = t.clan AND t.id=pt.team_id  AND player_id = '.$pid);
models/clanmodel.php:	$this->db->where('playerid', $pid);
models/clanmodel.php:	 $this->db->where('cid', $clanid);
models/clanmodel.php:        $query = $this->db->get('jos_bl_clanmembers');
models/clanmodel.php:     	$this->db->where('team_id', $team);
models/clanmodel.php:        $query = $this->db->get('jos_bl_players_team');
models/clanmodel.php:	$this->db->where('cid', $clan);
models/clanmodel.php:        $query = $this->db->get('jos_bl_clanmembers');
models/clanmodel.php:        $this->db->where('cid', $clan);
models/clanmodel.php:	$this->db->where('playerid', user_id());
models/clanmodel.php:        $query = $this->db->get('jos_bl_clanmembers');
models/clanmodel.php:		$this->db->like('tag', $search);
models/clanmodel.php:        $query = $this->db->get('jos_bl_clan');
models/clanmodel.php:         $members = sizeof($this->get_members($item->id));
models/clanmodel.php:	 $item->teams = sizeof($this->get_teams($item->id));
models/clanmodel.php:         $this->db->where('id', $data['id']);
models/clanmodel.php:         $this->db->update('jos_bl_clan', $data);
models/clanmodel.php:         $this->db->insert('jos_bl_clan', $data);
models/clanmodel.php:	 $id = $this->db->insert_id();
models/clanmodel.php:	 $this->db->insert('jos_bl_teams', $data);
models/clanmodel.php:         return $this->db->insert_id();
models/clanmodel.php:         $this->db->insert('jos_bl_players_team', $data);
models/clanmodel.php:         return $this->db->insert_id();
models/clanmodel.php:         $this->db->where('id', $item['id']);
models/clanmodel.php:         $this->db->update('jos_bl_clanmembers', $item);
models/clanmodel.php:     	return sha1($password.$this->config->item('encryption_key'));
models/servermodel.php:	 $query = $this->db->query("SELECT s.id, s.ip, s.port, s.password, s.name as sname, g.name FROM jos_egsa_server s, jos_egsa_game g WHERE s.game = g.id ");
models/servermodel.php:	 $this->db->where('id', $id);
models/servermodel.php:	 $query = $this->db->get("jos_egsa_server");
models/servermodel.php:	 $query = $this->db->get("jos_egsa_password");
models/servermodel.php:        $this->db->where('id', $id);
models/servermodel.php:        if ($this->db->delete('jos_egsa_server')) {
models/servermodel.php:	 $this->db->where('server', $id);
models/servermodel.php:	 $this->db->delete('server_booking');
models/servermodel.php:         $this->db->where('id', $data['id']);
models/servermodel.php:         $this->db->update('jos_egsa_server', $data);
models/servermodel.php:         $this->db->insert('jos_egsa_server', $data);
models/servermodel.php:         return $this->db->insert_id();
models/clientmodel.php:     	$this->db->where('id', $id);
models/clientmodel.php:        $query = $this->db->get('client');
models/clientmodel.php:        $query = $this->db->get('client');
models/clientmodel.php:     $this->db->where('username', $username);
models/clientmodel.php:     $this->db->where('password', $this->_prep_password($password));
models/clientmodel.php:     $query = $this->db->get('client', 1);
models/clientmodel.php:	   $user = $this->get($id);
models/clientmodel.php:	   $this->session->set_userdata('client', $user);
models/clientmodel.php:	   $this->session->set_userdata('loggedinclient', true);
models/clientmodel.php:	 $data['password'] = $this->_prep_password($data['password']);
models/clientmodel.php:         $this->db->where('id', $data['id']);
models/clientmodel.php:         $this->db->update('client', $data);
models/clientmodel.php:         $this->db->insert('client', $data);
models/clientmodel.php:         return $this->db->insert_id();
models/clientmodel.php:     	return sha1($password.$this->config->item('encryption_key'));
models/challengemodel.php:        $this->db->where("playdate >=", date("Y-m-d"));
models/challengemodel.php:     	$this->db->where('id', $id);
models/challengemodel.php:        $query = $this->db->get('jos_bl_challenge');
models/challengemodel.php:	$userid = $this->session->userdata("user")->id;
models/challengemodel.php:	$this->db->insert('jos_bl_clanmembers', $data);
models/challengemodel.php:	$c = $this->get($clan);
models/challengemodel.php:        return $this->db->insert_id();
models/challengemodel.php:        $this->db->where('roleid', $id);
models/challengemodel.php:        $query = $this->db->get('jos_bl_roles');
models/challengemodel.php:	$this->db->where("playdate >=", date("Y-m-d"));
models/challengemodel.php:        $this->db->where('team2', $team);
models/challengemodel.php:        $this->db->where('owner !=', user_id());
models/challengemodel.php:        $query = $this->db->get('jos_bl_challenge');
models/challengemodel.php:	$query = $this->db->query('SELECT *, c.id as cid FROM jos_bl_clan c, jos_bl_clanmembers cm WHERE cm.playerid = '.$pid.' AND c.id=cm.cid');
models/challengemodel.php:	$clan['teams'] = $this->myteams();
models/challengemodel.php:	//$this->db->where('player_id', $pid);
models/challengemodel.php:        $query = $this->db->query('SELECT * FROM jos_bl_players_team pt, jos_bl_teams t WHERE t.id=pt.team_id  AND player_id = '.$pid);
models/challengemodel.php:	$pid = $this->session->userdata("user")->id;
models/challengemodel.php:	$this->db->where('playerid', $pid);
models/challengemodel.php:        $query = $this->db->get('jos_bl_clanmembers');
models/challengemodel.php:     	$this->db->where('team_id', $team);
models/challengemodel.php:        $query = $this->db->get('jos_bl_players_team');
models/challengemodel.php:	$this->db->where('cid', $clan);
models/challengemodel.php:        $query = $this->db->get('jos_bl_clanmembers');
models/challengemodel.php:        $this->db->where('cid', $clan);
models/challengemodel.php:	$this->db->where('playerid', $this->session->userdata("user")->id);
models/challengemodel.php:        $query = $this->db->get('jos_bl_clanmembers');
models/challengemodel.php:	$this->db->where("playdate >=", date("Y-m-d"));
models/challengemodel.php:	$this->db->where('owner', user_id());
models/challengemodel.php:        $query = $this->db->get('jos_bl_challenge');
models/challengemodel.php:         $this->db->where('id', $data['id']);
models/challengemodel.php:         $this->db->update('jos_bl_challenge', $data);
models/challengemodel.php:         $this->db->insert('jos_bl_challenge', $data);
models/challengemodel.php:	 $id = $this->db->insert_id();
models/challengemodel.php:	 $data['created_by'] = $this->session->userdata("user")->id;
models/challengemodel.php:	 $this->db->insert('jos_bl_teams', $data);
models/challengemodel.php:         return $this->db->insert_id();
models/challengemodel.php:         $this->db->insert('jos_bl_players_team', $data);
models/challengemodel.php:         return $this->db->insert_id();
models/challengemodel.php:         $this->db->where('id', $item['id']);
models/challengemodel.php:         $this->db->update('jos_bl_clanmembers', $item);
models/challengemodel.php:     	return sha1($password.$this->config->item('encryption_key'));
models/playermodel.php:	$this->db->cache_off();
models/playermodel.php:     	 $this->db->where('id', $id);
models/playermodel.php:	 $this->db->where('alias', $id);
models/playermodel.php:        $query = $this->db->get('jos_comprofiler');
models/playermodel.php:        $query = $this->db->get('jos_comprofiler');
models/playermodel.php:     $this->db->where('alias', $username);
models/playermodel.php:     $this->db->where('password', $this->_prep_password($password));
models/playermodel.php:     $query = $this->db->get('jos_comprofiler', 1);
models/playermodel.php:	   //$user = $this->get($id);
models/playermodel.php:	   $this->session->set_userdata('user', $user->id);
models/playermodel.php:	   $this->session->set_userdata('loggedin', true);
models/playermodel.php:	 $data['password'] = $this->_prep_password($data['password']);
models/playermodel.php:         $this->db->where('id', $data['id']);
models/playermodel.php:         $this->db->update('jos_comprofiler', $data);
models/playermodel.php:         $user = $this->get($data['id']);
models/playermodel.php:	 //$this->session->set_userdata('user', $user);
models/playermodel.php:         $this->db->insert('jos_comprofiler', $data);
models/playermodel.php:	 $userid = $this->db->insert_id();
models/playermodel.php:	 $this->db->where("enabled", 1);
models/playermodel.php:	 $this->db->order_by("ordering", "ASC");
models/playermodel.php:	 $query = $this->db->get("jos_comprofiler_tabs");
models/playermodel.php:		$item->fields = $this->fields($tab->tabid);
models/playermodel.php:	 $this->db->where("tabid", $id);
models/playermodel.php:	 $query = $this->db->get("jos_comprofiler_tabs");
models/playermodel.php:	 $this->db->where("tabid", $tab);
models/playermodel.php:	 $this->db->where("published", 1);
models/playermodel.php:	 $this->db->order_by("ordering", "ASC");
models/playermodel.php:	 $query = $this->db->get("jos_comprofiler_fields");
models/playermodel.php:     	return sha1($password.$this->config->item('encryption_key'));
models/membermodel.php:	$this->db->where('id', $id);
models/membermodel.php:        if ($this->db->delete('employee'))
models/membermodel.php:	$this->db->where('id', $id);
models/membermodel.php:	$query = $this->db->get('members');
models/membermodel.php:        $query = $this->db->get('members');
models/membermodel.php:         $this->db->where('id', $data['id']);
models/membermodel.php:         $this->db->update('members', $data);
models/membermodel.php:         $this->db->insert('members', $data);
models/membermodel.php:         return $this->db->insert_id();
models/membermodel.php:        return sha1($password.$this->config->item('encryption_key'));
views/menu/edit.php:<div id="navbar"><?=button("add", "Add Item", "plus", "/menu/index.html");?> <?=button("delete", "Delete Item", "minus", "/menu/delete/".$this->uri->segment(3).".html");?></div>
Binary file views/rt_metamorph_v2_j15.tgz matches
views/gallery/index.php:$img = $this->Gallerymodel->get_images($album->id); 
views/gallery/images.php.back:        if ($this->session->userdata('loggedin'))
views/gallery/images.php.back:<? if ($this->session->userdata('loggedin')) { echo "<a href='/gallery/image_delete/".$image->id."' class='confirmClick'>delete</a>"; } ?>
views/server/list.php:         $this->bc2conn->connect($server->ip, $server->port);
views/server/list.php:         $this->bc2conn->loginSecure($server->password);
views/server/list.php:         $servername = $this->bc2conn->getServerName();
views/server/list.php:         $players = $this->bc2conn->getCurrentPlayers() . "/" . $this->bc2conn->getMaxPlayers();
views/server/list.php:         $mode = $this->bc2conn->getCurrentPlaymodeName();
views/server/list.php:         $map = $this->bc2conn->getCurrentMapName(); }
views/server/management.php:         $this->bc2conn->connect($server->ip, $server->port);
views/server/management.php:         $this->bc2conn->loginSecure($server->password);
views/server/management.php:         $servername = $this->bc2conn->getServerName();
views/server/management.php:         $players = $this->bc2conn->getCurrentPlayers() . "/" . $this->bc2conn->getMaxPlayers();
views/server/management.php:         $mode = $this->bc2conn->getCurrentPlaymodeName();
views/server/management.php:         $map = $this->bc2conn->getCurrentMapName(); }
views/news/index.php:if ($this->session->userdata('loggedin'))
views/admin/menu.php:							<li><a class="popup" href="/admin/newslist/<?=$this->uri->segment(3)?>.html">Edit Article</a></li>
views/admin/menu.php:							<li><a href="/news/view/<?=$this->uri->segment(3)?>.html">View Article</a></li>
views/admin/menu.php:                                                        <li><a href="/pages/edit/<?=$this->uri->segment(3)?>.html">Edit Page</a></li>
views/admin/menu.php:                                                        <li><a href="/pages/view/<?=$this->uri->segment(3)?>.html">View Page</a></li>
views/admin/menu.php:                                                        <li><a href="/admin/editgallery/<?=$this->uri->segment(3)?>.html">Edit Gallery</a></li>
views/admin/menu.php:                                                        <li><a href="/news/view/<?=$this->uri->segment(3)?>.html">View Article</a></li>
views/home/index.php:<center><?=$this->pagination->create_links(); ?></center>
views/member/view.php:if ($this->session->userdata('loggedin'))
views/challenge/view.php:	<input type="hidden" name="controller" value="<?=$this->router->class?>" />
views/layout_main.php:										<div class="breadcrumbs"><a href="/">Home</a><span><?=ucfirst($this->router->class)?></span><strong><?=$title?></strong></div>																				
views/layout_main.php:														<div id="system" class="columns-2"><?=$this->session->flashdata('msg');?></div>
views/layout_main.php:		<?if (!$this->session->userdata("loggedin")) { ?>
views/layout_main.php.old:										<div class="breadcrumbs"><a href="/">Home</a><span><?=ucfirst($this->router->class)?></span><strong><?=$title?></strong></div>																				
views/layout_main.php.old:														<div id="system" class="columns-2"><?=$this->session->flashdata('msg');?></div>
views/layout_main.php.old:		<?if (!$this->session->userdata("loggedin")) { ?>
views/player/rig.php:$user = $this->session->userdata("user"); ?>
